[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}], [["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}], [["localhost:8000/genfromtxt", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fname"], "description": "File, filename, list, or generator to read.  If the filename\nextension is `.gz` or `.bz2`, the file is first decompressed. Note\nthat generators must return byte strings. The strings\nin a list or produced by a generator are treated as lines.", "arg_name": "fname", "type_name": "file, str, pathlib.Path, list of str, generator", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the resulting array.\nIf None, the dtypes will be determined by the contents of each\ncolumn, individually.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "comments"], "description": "The character used to indicate the start of a comment.\nAll the characters occurring on a line after a comment are discarded", "arg_name": "comments", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "delimiter"], "description": "The string used to separate values.  By default, any consecutive\nwhitespaces act as delimiter.  An integer or sequence of integers\ncan also be provided as width(s) of each field.", "arg_name": "delimiter", "type_name": "str, int, or sequence", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skiprows"], "description": "`skiprows` was removed in numpy 1.10. Please use `skip_header` instead.", "arg_name": "skiprows", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skip_header"], "description": "The number of lines to skip at the beginning of the file.", "arg_name": "skip_header", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skip_footer"], "description": "The number of lines to skip at the end of the file.", "arg_name": "skip_footer", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "converters"], "description": "The set of functions that convert the data of a column to a value.\nThe converters can also be used to provide a default value\nfor missing data: ``converters = {3: lambda s: float(s or 0)}``.", "arg_name": "converters", "type_name": "variable", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "missing"], "description": "`missing` was removed in numpy 1.10. Please use `missing_values`\ninstead.", "arg_name": "missing", "type_name": "variable", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "missing_values"], "description": "The set of strings corresponding to missing data.", "arg_name": "missing_values", "type_name": "variable", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filling_values"], "description": "The set of values to be used as default when the data are missing.", "arg_name": "filling_values", "type_name": "variable", "is_optional": true, "default": "when"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "usecols"], "description": "Which columns to read, with 0 being the first.  For example,\n``usecols = (1, 4, 5)`` will extract the 2nd, 5th and 6th columns.", "arg_name": "usecols", "type_name": "sequence", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "If `names` is True, the field names are read from the first line after\nthe first `skip_header` lines.  This line can optionally be proceeded\nby a comment delimiter. If `names` is a sequence or a single-string of\ncomma-separated names, the names will be used to define the field names\nin a structured dtype. If `names` is None, the names of the dtype\nfields will be used, if any.", "arg_name": "names", "type_name": "{None, True, str, sequence}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "excludelist"], "description": "A list of names to exclude. This list is appended to the default list\n['return','file','print']. Excluded names are appended an underscore:\nfor example, `file` would become `file_`.", "arg_name": "excludelist", "type_name": "sequence", "is_optional": true, "default": "list"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "deletechars"], "description": "A string combining invalid characters that must be deleted from the\nnames.", "arg_name": "deletechars", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "defaultfmt"], "description": "A format used to define default field names, such as \"f%i\" or \"f_%02i\".", "arg_name": "defaultfmt", "type_name": "str", "is_optional": true, "default": "field"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "autostrip"], "description": "Whether to automatically strip white spaces from the variables.", "arg_name": "autostrip", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "replace_space"], "description": "Character(s) used in replacement of white spaces in the variables\nnames. By default, use a '_'.", "arg_name": "replace_space", "type_name": "char", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "case_sensitive"], "description": "If True, field names are case sensitive.\nIf False or 'upper', field names are converted to upper case.\nIf 'lower', field names are converted to lower case.", "arg_name": "case_sensitive", "type_name": "{True, False, 'upper', 'lower'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "unpack"], "description": "If True, the returned array is transposed, so that arguments may be\nunpacked using ``x, y, z = genfromtxt(...)``.  When used with a\nstructured data-type, arrays are returned for each field.\nDefault is False.", "arg_name": "unpack", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "usemask"], "description": "If True, return a masked array.\nIf False, return a regular array.", "arg_name": "usemask", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loose"], "description": "If True, do not raise errors for invalid values.", "arg_name": "loose", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "invalid_raise"], "description": "If True, an exception is raised if an inconsistency is detected in the\nnumber of columns.\nIf False, a warning is emitted and the offending lines are skipped.", "arg_name": "invalid_raise", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_rows"], "description": "The maximum number of rows to read. Must not be used with skip_footer\nat the same time.  If given, the value must be at least 1. Default is\nto read the entire file.\n\n.. versionadded:: 1.10.0", "arg_name": "max_rows", "type_name": "int,  optional", "is_optional": false, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "Encoding used to decode the inputfile. Does not apply when `fname` is\na file object.  The special value 'bytes' enables backward compatibility\nworkarounds that ensure that you receive byte arrays when possible\nand passes latin1 encoded strings to converters. Override this value to\nreceive unicode arrays and pass strings as input to converters.  If set\nto None the system default is used. The default value is 'bytes'.\n\n.. versionadded:: 1.14.0", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": "used."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file. If `usemask` is True, this is a\nmasked array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file. If `usemask` is True, this is a\nmasked array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}], [["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}], ["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}], [["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}], [["localhost:8000/loadtxt", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fname"], "description": "File, filename, or generator to read.  If the filename extension is\n``.gz`` or ``.bz2``, the file is first decompressed. Note that\ngenerators should return byte strings.", "arg_name": "fname", "type_name": "file, str, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the resulting array; default: float.  If this is a\nstructured data-type, the resulting array will be 1-dimensional, and\neach row will be interpreted as an element of the array.  In this\ncase, the number of columns used must match the number of fields in\nthe data-type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "comments"], "description": "The characters or list of characters used to indicate the start of a\ncomment. None implies no comments. For backwards compatibility, byte\nstrings will be decoded as 'latin1'. The default is '#'.", "arg_name": "comments", "type_name": "str or sequence of str", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "delimiter"], "description": "The string used to separate values. For backwards compatibility, byte\nstrings will be decoded as 'latin1'. The default is whitespace.", "arg_name": "delimiter", "type_name": "str", "is_optional": true, "default": "whitespace."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "converters"], "description": "A dictionary mapping column number to a function that will parse the\ncolumn string into the desired value.  E.g., if column 0 is a date\nstring: ``converters = {0: datestr2num}``.  Converters can also be\nused to provide a default value for missing data (but see also\n`genfromtxt`): ``converters = {3: lambda s: float(s.strip() or 0)}``.\nDefault: None.", "arg_name": "converters", "type_name": "dict", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skiprows"], "description": "Skip the first `skiprows` lines, including comments; default: 0.", "arg_name": "skiprows", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "usecols"], "description": "Which columns to read, with 0 being the first. For example,\n``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.\nThe default, None, results in all columns being read.\n\n.. versionchanged:: 1.11.0\n    When a single column has to be read it is possible to use\n    an integer instead of a tuple. E.g ``usecols = 3`` reads the\n    fourth column the same way as ``usecols = (3,)`` would.", "arg_name": "usecols", "type_name": "int or sequence", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "unpack"], "description": "If True, the returned array is transposed, so that arguments may be\nunpacked using ``x, y, z = loadtxt(...)``.  When used with a\nstructured data-type, arrays are returned for each field.\nDefault is False.", "arg_name": "unpack", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "The returned array will have at least `ndmin` dimensions.\nOtherwise mono-dimensional axes will be squeezed.\nLegal values: 0 (default), 1 or 2.\n\n.. versionadded:: 1.6.0", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "Encoding used to decode the inputfile. Does not apply to input streams.\nThe special value 'bytes' enables backward compatibility workarounds\nthat ensures you receive byte arrays as results if possible and passes\n'latin1' encoded strings to converters. Override this value to receive\nunicode arrays and pass strings as input to converters.  If set to None\nthe system default is used. The default value is 'bytes'.\n\n.. versionadded:: 1.14.0", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": "used."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_rows"], "description": "Read `max_rows` lines of content after `skiprows` lines. The default\nis to read all the lines.\n\n.. versionadded:: 1.16.0", "arg_name": "max_rows", "type_name": "int", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}], ["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}], [["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}], ["localhost:8000/loadtxt", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fname"], "description": "File, filename, or generator to read.  If the filename extension is\n``.gz`` or ``.bz2``, the file is first decompressed. Note that\ngenerators should return byte strings.", "arg_name": "fname", "type_name": "file, str, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the resulting array; default: float.  If this is a\nstructured data-type, the resulting array will be 1-dimensional, and\neach row will be interpreted as an element of the array.  In this\ncase, the number of columns used must match the number of fields in\nthe data-type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "comments"], "description": "The characters or list of characters used to indicate the start of a\ncomment. None implies no comments. For backwards compatibility, byte\nstrings will be decoded as 'latin1'. The default is '#'.", "arg_name": "comments", "type_name": "str or sequence of str", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "delimiter"], "description": "The string used to separate values. For backwards compatibility, byte\nstrings will be decoded as 'latin1'. The default is whitespace.", "arg_name": "delimiter", "type_name": "str", "is_optional": true, "default": "whitespace."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "converters"], "description": "A dictionary mapping column number to a function that will parse the\ncolumn string into the desired value.  E.g., if column 0 is a date\nstring: ``converters = {0: datestr2num}``.  Converters can also be\nused to provide a default value for missing data (but see also\n`genfromtxt`): ``converters = {3: lambda s: float(s.strip() or 0)}``.\nDefault: None.", "arg_name": "converters", "type_name": "dict", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skiprows"], "description": "Skip the first `skiprows` lines, including comments; default: 0.", "arg_name": "skiprows", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "usecols"], "description": "Which columns to read, with 0 being the first. For example,\n``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.\nThe default, None, results in all columns being read.\n\n.. versionchanged:: 1.11.0\n    When a single column has to be read it is possible to use\n    an integer instead of a tuple. E.g ``usecols = 3`` reads the\n    fourth column the same way as ``usecols = (3,)`` would.", "arg_name": "usecols", "type_name": "int or sequence", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "unpack"], "description": "If True, the returned array is transposed, so that arguments may be\nunpacked using ``x, y, z = loadtxt(...)``.  When used with a\nstructured data-type, arrays are returned for each field.\nDefault is False.", "arg_name": "unpack", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "The returned array will have at least `ndmin` dimensions.\nOtherwise mono-dimensional axes will be squeezed.\nLegal values: 0 (default), 1 or 2.\n\n.. versionadded:: 1.6.0", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "Encoding used to decode the inputfile. Does not apply to input streams.\nThe special value 'bytes' enables backward compatibility workarounds\nthat ensures you receive byte arrays as results if possible and passes\n'latin1' encoded strings to converters. Override this value to receive\nunicode arrays and pass strings as input to converters.  If set to None\nthe system default is used. The default value is 'bytes'.\n\n.. versionadded:: 1.14.0", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": "used."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_rows"], "description": "Read `max_rows` lines of content after `skiprows` lines. The default\nis to read all the lines.\n\n.. versionadded:: 1.16.0", "arg_name": "max_rows", "type_name": "int", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/memmap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filename"], "description": "The file name or file object to be used as the array data buffer.", "arg_name": "filename", "type_name": "str, file-like object, or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type used to interpret the file contents.\nDefault is `uint8`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "The file is opened in this mode:\n\n+------+-------------------------------------------------------------+\n| 'r'  | Open existing file for reading only.                        |\n+------+-------------------------------------------------------------+\n| 'r+' | Open existing file for reading and writing.                 |\n+------+-------------------------------------------------------------+\n| 'w+' | Create or overwrite existing file for reading and writing.  |\n+------+-------------------------------------------------------------+\n| 'c'  | Copy-on-write: assignments affect data in memory, but       |\n|      | changes are not saved to disk.  The file on disk is         |\n|      | read-only.                                                  |\n+------+-------------------------------------------------------------+\n\nDefault is 'r+'.", "arg_name": "mode", "type_name": "{'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "In the file, array data starts at this offset. Since `offset` is\nmeasured in bytes, it should normally be a multiple of the byte-size\nof `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\nfile are valid; The file will be extended to accommodate the\nadditional data. By default, ``memmap`` will start at the beginning of\nthe file, even if ``filename`` is a file pointer ``fp`` and\n``fp.tell() != 0``.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The desired shape of the array. If ``mode == 'r'`` and the number\nof remaining bytes after `offset` is not a multiple of the byte-size\nof `dtype`, you must specify `shape`. By default, the returned array\nwill be 1-D with the number of elements determined by file size\nand data-type.", "arg_name": "shape", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the order of the ndarray memory layout:\n:term:`row-major`, C-style or :term:`column-major`,\nFortran-style.  This only has an effect if the shape is\ngreater than 1-D.  The default order is 'C'.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "filename"], "description": "Path to the mapped file.", "arg_name": "filename", "type_name": "str or pathlib.Path instance", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "offset"], "description": "Offset position in the file.", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "mode"], "description": "File mode.", "arg_name": "mode", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "Methods"], "description": null, "arg_name": "Methods", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "-------"], "description": null, "arg_name": "-------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flush"], "description": "Flush any changes in memory to file on disk.\nWhen you delete a memmap object, flush is called first to write\nchanges to disk.", "arg_name": "flush", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "lib.format.open_memmap"], "description": null, "arg_name": "lib.format.open_memmap", "type_name": "Create or load a memory-mapped ``.npy`` file.", "is_optional": false, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/fromstring", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}], ["localhost:8000/recarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of output array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type.  By default, the data-type is determined\nfrom `formats`, `names`, `titles`, `aligned` and `byteorder`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formats"], "description": "A list containing the data-types for the different columns, e.g.\n``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\nconvention of using types directly, i.e. ``(int, float, int)``.\nNote that `formats` must be a list, not a tuple.\nGiven that `formats` is somewhat limited, we recommend specifying\n`dtype` instead.", "arg_name": "formats", "type_name": "list of data-types", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "The name of each column, e.g. ``('x', 'y', 'z')``.", "arg_name": "names", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buf"], "description": "By default, a new array is created of the given shape and data-type.\nIf `buf` is specified and is an object exposing the buffer interface,\nthe array will use the memory from the existing buffer.  In this case,\nthe `offset` and `strides` keywords are available.", "arg_name": "buf", "type_name": "buffer", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "titles"], "description": "Aliases for column names.  For example, if `names` were\n``('x', 'y', 'z')`` and `titles` is\n``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.", "arg_name": "titles", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "byteorder"], "description": "Byte-order for all fields.", "arg_name": "byteorder", "type_name": "{'<', '>', '='}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "aligned"], "description": "Align the fields in memory as the C-compiler would.", "arg_name": "aligned", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "strides"], "description": "Buffer (`buf`) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "offset"], "description": "Start reading buffer (`buf`) from this offset onwards.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}], [["localhost:8000/triu_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The size of the arrays for which the returned indices will\nbe valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `triu` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.  Can be used\nto slice a ndarray of shape(`n`, `n`).", "type_name": "tuple, shape(2) of ndarrays, shape(`n`)", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.  Can be used\nto slice a ndarray of shape(`n`, `n`).", "type_name": "tuple, shape(2) of ndarrays, shape(`n`)", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], [["localhost:8000/indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dimensions"], "description": "The shape of the grid.", "arg_name": "dimensions", "type_name": "sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the result.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "Return a sparse representation of the grid instead of a dense\nrepresentation. Default is False.\n\n.. versionadded:: 1.17", "arg_name": "sparse", "type_name": "boolean", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}], ["localhost:8000/unpackbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray, uint8 type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-unpacking is done.\n``None`` implies unpacking the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of elements to unpack along `axis`, provided as a way\nof undoing the effect of packing a size that is not a multiple\nof eight. A non-negative number means to only unpack `count`\nbits. A negative number means to trim off that many bits from\nthe end. ``None`` means to unpack the entire array (the\ndefault). Counts larger than the available number of bits will\nadd zero padding to the output. Negative counts must not\nexceed the available number of bits.\n\n.. versionadded:: 1.17.0", "arg_name": "count", "type_name": "int or None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the returned bits. 'big' will mimic bin(val),\n``3 = 0b00000011 => [0, 0, 0, 0, 0, 0, 1, 1]``, 'little' will reverse\nthe order to ``[1, 1, 0, 0, 0, 0, 0, 0]``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/array_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_line_width"], "description": "Inserts newlines if text is longer than `max_line_width`.\nDefaults to ``numpy.get_printoptions()['linewidth']``.", "arg_name": "max_line_width", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "precision"], "description": "Floating point precision.\nDefaults to ``numpy.get_printoptions()['precision']``.", "arg_name": "precision", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "suppress_small"], "description": "Represent numbers \"very close\" to zero as zero; default is False.\nVery close is defined by precision: if the precision is 8, e.g.,\nnumbers smaller (in absolute value) than 5e-9 are represented as\nzero.\nDefaults to ``numpy.get_printoptions()['suppress']``.", "arg_name": "suppress_small", "type_name": "bool", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The string representation of an array.", "type_name": "str", "is_generator": false, "return_name": "string"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The string representation of an array.", "type_name": "str", "is_generator": false, "return_name": "string"}}], ["localhost:8000/array2string", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_line_width"], "description": "Inserts newlines if text is longer than `max_line_width`.\nDefaults to ``numpy.get_printoptions()['linewidth']``.", "arg_name": "max_line_width", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "precision"], "description": "Floating point precision.\nDefaults to ``numpy.get_printoptions()['precision']``.", "arg_name": "precision", "type_name": "int or None", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "suppress_small"], "description": "Represent numbers \"very close\" to zero as zero; default is False.\nVery close is defined by precision: if the precision is 8, e.g.,\nnumbers smaller (in absolute value) than 5e-9 are represented as\nzero.\nDefaults to ``numpy.get_printoptions()['suppress']``.", "arg_name": "suppress_small", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "separator"], "description": "Inserted between elements.", "arg_name": "separator", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prefix"], "description": null, "arg_name": "prefix", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "suffix"], "description": "The length of the prefix and suffix strings are used to respectively\nalign and wrap the output. An array is typically printed as::\n\n  prefix + array2string(a) + suffix\n\nThe output is left-padded by the length of the prefix string, and\nwrapping is forced at the column ``max_line_width - len(suffix)``.\nIt should be noted that the content of prefix and suffix strings are\nnot included in the output.", "arg_name": "suffix", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "style"], "description": "Has no effect, do not use.\n\n.. deprecated:: 1.14.0", "arg_name": "style", "type_name": "_NoValue", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formatter"], "description": "If not None, the keys should indicate the type(s) that the respective\nformatting function applies to.  Callables should return a string.\nTypes that are not specified (by their corresponding keys) are handled\nby the default formatters.  Individual types for which a formatter\ncan be set are:\n\n- 'bool'\n- 'int'\n- 'timedelta' : a `numpy.timedelta64`\n- 'datetime' : a `numpy.datetime64`\n- 'float'\n- 'longfloat' : 128-bit floats\n- 'complexfloat'\n- 'longcomplexfloat' : composed of two 128-bit floats\n- 'void' : type `numpy.void`\n- 'numpystr' : types `numpy.string_` and `numpy.unicode_`\n- 'str' : all other strings\n\nOther keys that can be used to set a group of types at once are:\n\n- 'all' : sets all types\n- 'int_kind' : sets 'int'\n- 'float_kind' : sets 'float' and 'longfloat'\n- 'complex_kind' : sets 'complexfloat' and 'longcomplexfloat'\n- 'str_kind' : sets 'str' and 'numpystr'", "arg_name": "formatter", "type_name": "dict of callables", "is_optional": true, "default": "formatters."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "threshold"], "description": "Total number of array elements which trigger summarization\nrather than full repr.\nDefaults to ``numpy.get_printoptions()['threshold']``.", "arg_name": "threshold", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "edgeitems"], "description": "Number of array items in summary at beginning and end of\neach dimension.\nDefaults to ``numpy.get_printoptions()['edgeitems']``.", "arg_name": "edgeitems", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sign"], "description": "Controls printing of the sign of floating-point types. If '+', always\nprint the sign of positive values. If ' ', always prints a space\n(whitespace character) in the sign position of positive values.  If\n'-', omit the sign character of positive values.\nDefaults to ``numpy.get_printoptions()['sign']``.", "arg_name": "sign", "type_name": "string, either '-', '+', or ' '", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "floatmode"], "description": "Controls the interpretation of the `precision` option for\nfloating-point types.\nDefaults to ``numpy.get_printoptions()['floatmode']``.\nCan take the following values:\n\n- 'fixed': Always print exactly `precision` fractional digits,\n  even if this would print more or fewer digits than\n  necessary to specify the value uniquely.\n- 'unique': Print the minimum number of fractional digits necessary\n  to represent each value uniquely. Different elements may\n  have a different number of digits.  The value of the\n  `precision` option is ignored.\n- 'maxprec': Print at most `precision` fractional digits, but if\n  an element can be uniquely represented with fewer digits\n  only print it with that many.\n- 'maxprec_equal': Print at most `precision` fractional digits,\n  but if every element in the array can be uniquely\n  represented with an equal number of fewer digits, use that\n  many digits for all elements.", "arg_name": "floatmode", "type_name": "str", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "legacy"], "description": "If set to the string `'1.13'` enables 1.13 legacy printing mode. This\napproximates numpy 1.13 print output by including a space in the sign\nposition of floats and different behavior for 0d arrays. If set to\n`False`, disables legacy mode. Unrecognized strings will be ignored\nwith a warning for forward compatibility.\n\n.. versionadded:: 1.14.0", "arg_name": "legacy", "type_name": "string or `False`", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "String representation of the array.", "type_name": "str", "is_generator": false, "return_name": "array_str"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "String representation of the array.", "type_name": "str", "is_generator": false, "return_name": "array_str"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}], [["localhost:8000/setxor1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ar1, ar2"], "description": "Input arrays.", "arg_name": "ar1, ar2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": false, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}], [["localhost:8000/block", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays"], "description": "If passed a single ndarray or scalar (a nested list of depth 0), this\nis returned unmodified (and not copied).\n\nElements shapes must match along the appropriate axes (without\nbroadcasting), but leading 1s will be prepended to the shape as\nnecessary to make the dimensions match.", "arg_name": "arrays", "type_name": "nested list of array_like or scalars (but not tuples)", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The array assembled from the given blocks.\n\nThe dimensionality of the output is equal to the greatest of:\n* the dimensionality of all the inputs\n* the depth to which the input list is nested", "type_name": "ndarray", "is_generator": false, "return_name": "block_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The array assembled from the given blocks.\n\nThe dimensionality of the output is equal to the greatest of:\n* the dimensionality of all the inputs\n* the depth to which the input list is nested", "type_name": "ndarray", "is_generator": false, "return_name": "block_array"}}], ["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}], [["localhost:8000/geterr", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A dictionary with keys \"divide\", \"over\", \"under\", and \"invalid\",\nwhose values are from the strings \"ignore\", \"print\", \"log\", \"warn\",\n\"raise\", and \"call\". The keys represent possible floating-point\nexceptions, and the values define how these exceptions are handled.", "type_name": "dict", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A dictionary with keys \"divide\", \"over\", \"under\", and \"invalid\",\nwhose values are from the strings \"ignore\", \"print\", \"log\", \"warn\",\n\"raise\", and \"call\". The keys represent possible floating-point\nexceptions, and the values define how these exceptions are handled.", "type_name": "dict", "is_generator": false, "return_name": "res"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}], [["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}], ["localhost:8000/atleast_1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more input arrays.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/array_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_line_width"], "description": "Inserts newlines if text is longer than `max_line_width`.\nDefaults to ``numpy.get_printoptions()['linewidth']``.", "arg_name": "max_line_width", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "precision"], "description": "Floating point precision.\nDefaults to ``numpy.get_printoptions()['precision']``.", "arg_name": "precision", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "suppress_small"], "description": "Represent numbers \"very close\" to zero as zero; default is False.\nVery close is defined by precision: if the precision is 8, e.g.,\nnumbers smaller (in absolute value) than 5e-9 are represented as\nzero.\nDefaults to ``numpy.get_printoptions()['suppress']``.", "arg_name": "suppress_small", "type_name": "bool", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The string representation of an array.", "type_name": "str", "is_generator": false, "return_name": "string"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The string representation of an array.", "type_name": "str", "is_generator": false, "return_name": "string"}}], ["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/setxor1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ar1, ar2"], "description": "Input arrays.", "arg_name": "ar1, ar2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": false, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/setxor1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ar1, ar2"], "description": "Input arrays.", "arg_name": "ar1, ar2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": false, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/stack", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays"], "description": "Each array must have the same shape.", "arg_name": "arrays", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis in the result array along which the input arrays are stacked.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what stack would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The stacked array has one more dimension than the input arrays.", "type_name": "ndarray", "is_generator": false, "return_name": "stacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The stacked array has one more dimension than the input arrays.", "type_name": "ndarray", "is_generator": false, "return_name": "stacked"}}], ["localhost:8000/shape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/shape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}], ["localhost:8000/recarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of output array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type.  By default, the data-type is determined\nfrom `formats`, `names`, `titles`, `aligned` and `byteorder`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formats"], "description": "A list containing the data-types for the different columns, e.g.\n``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\nconvention of using types directly, i.e. ``(int, float, int)``.\nNote that `formats` must be a list, not a tuple.\nGiven that `formats` is somewhat limited, we recommend specifying\n`dtype` instead.", "arg_name": "formats", "type_name": "list of data-types", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "The name of each column, e.g. ``('x', 'y', 'z')``.", "arg_name": "names", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buf"], "description": "By default, a new array is created of the given shape and data-type.\nIf `buf` is specified and is an object exposing the buffer interface,\nthe array will use the memory from the existing buffer.  In this case,\nthe `offset` and `strides` keywords are available.", "arg_name": "buf", "type_name": "buffer", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "titles"], "description": "Aliases for column names.  For example, if `names` were\n``('x', 'y', 'z')`` and `titles` is\n``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.", "arg_name": "titles", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "byteorder"], "description": "Byte-order for all fields.", "arg_name": "byteorder", "type_name": "{'<', '>', '='}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "aligned"], "description": "Align the fields in memory as the C-compiler would.", "arg_name": "aligned", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "strides"], "description": "Buffer (`buf`) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "offset"], "description": "Start reading buffer (`buf`) from this offset onwards.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}], ["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}], [["localhost:8000/setxor1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ar1, ar2"], "description": "Input arrays.", "arg_name": "ar1, ar2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": false, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}], ["localhost:8000/recarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of output array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type.  By default, the data-type is determined\nfrom `formats`, `names`, `titles`, `aligned` and `byteorder`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formats"], "description": "A list containing the data-types for the different columns, e.g.\n``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\nconvention of using types directly, i.e. ``(int, float, int)``.\nNote that `formats` must be a list, not a tuple.\nGiven that `formats` is somewhat limited, we recommend specifying\n`dtype` instead.", "arg_name": "formats", "type_name": "list of data-types", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "The name of each column, e.g. ``('x', 'y', 'z')``.", "arg_name": "names", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buf"], "description": "By default, a new array is created of the given shape and data-type.\nIf `buf` is specified and is an object exposing the buffer interface,\nthe array will use the memory from the existing buffer.  In this case,\nthe `offset` and `strides` keywords are available.", "arg_name": "buf", "type_name": "buffer", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "titles"], "description": "Aliases for column names.  For example, if `names` were\n``('x', 'y', 'z')`` and `titles` is\n``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.", "arg_name": "titles", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "byteorder"], "description": "Byte-order for all fields.", "arg_name": "byteorder", "type_name": "{'<', '>', '='}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "aligned"], "description": "Align the fields in memory as the C-compiler would.", "arg_name": "aligned", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "strides"], "description": "Buffer (`buf`) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "offset"], "description": "Start reading buffer (`buf`) from this offset onwards.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}]]]
[["localhost:8000/ndarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "(for the __new__ method; see Notes below)"], "description": null, "arg_name": "(for the __new__ method; see Notes below)", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of created array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Any object that can be interpreted as a numpy data type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "Used to fill the array with data.", "arg_name": "buffer", "type_name": "object exposing buffer interface", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of array data in buffer.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "strides"], "description": "Strides of data in memory.", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "T"], "description": "Transpose of the array.", "arg_name": "T", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "data"], "description": "The array's elements, in memory.", "arg_name": "data", "type_name": "buffer", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtype"], "description": "Describes the format of the elements in the array.", "arg_name": "dtype", "type_name": "dtype object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flags"], "description": "Dictionary containing information related to memory use, e.g.,\n'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.", "arg_name": "flags", "type_name": "dict", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "flat"], "description": "Flattened version of the array as an iterator.  The iterator\nallows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for\nassignment examples; TODO).", "arg_name": "flat", "type_name": "numpy.flatiter object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "imag"], "description": "Imaginary part of the array.", "arg_name": "imag", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "real"], "description": "Real part of the array.", "arg_name": "real", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "size"], "description": "Number of elements in the array.", "arg_name": "size", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itemsize"], "description": "The memory use of each array element in bytes.", "arg_name": "itemsize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nbytes"], "description": "The total number of bytes required to store the array data,\ni.e., ``itemsize * size``.", "arg_name": "nbytes", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The array's number of dimensions.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape of the array.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "strides"], "description": "The step-size required to move from one element to the next in\nmemory. For example, a contiguous ``(3, 4)`` array of type\n``int16`` in C-order has strides ``(8, 2)``.  This implies that\nto move from element to element in memory requires jumps of 2 bytes.\nTo move from row-to-row, one needs to jump 8 bytes at a time\n(``2 * 4``).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ctypes"], "description": "Class containing properties of the array needed for interaction\nwith ctypes.", "arg_name": "ctypes", "type_name": "ctypes object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "base"], "description": "If the array is a view into another array, that array is its `base`\n(unless that array is also a view).  The `base` array is where the\narray data is actually stored.", "arg_name": "base", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/asarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data, in any form that can be converted to an array.  This\nincludes lists, lists of tuples, tuples, tuples of tuples, tuples\nof lists and ndarrays.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Memory layout.  'A' and 'K' depend on the order of input array a.\n'C' row-major (C-style), \n'F' column-major (Fortran-style) memory representation.\n'A' (any) means 'F' if `a` is Fortran contiguous, 'C' otherwise\n'K' (keep) preserve input order\nDefaults to 'C'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray with matching dtype and order.  If `a` is a\nsubclass of ndarray, a base class ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray with matching dtype and order.  If `a` is a\nsubclass of ndarray, a base class ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}], [["localhost:8000/bartlett", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}], [["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}], [["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}], [["localhost:8000/quantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n    * linear: ``i + (j - i) * fraction``, where ``fraction``\n      is the fractional part of the index surrounded by ``i``\n      and ``j``.\n    * lower: ``i``.\n    * higher: ``j``.\n    * nearest: ``i`` or ``j``, whichever is nearest.\n    * midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single quantile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single quantile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}], [["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}], [["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/broadcast", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "in1, in2, ..."], "description": "Input parameters.", "arg_name": "in1, in2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Broadcast the input parameters against one another, and\nreturn an object that encapsulates the result.\nAmongst others, it has ``shape`` and ``nd`` properties, and\nmay be used as an iterator.", "type_name": "broadcast object", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Broadcast the input parameters against one another, and\nreturn an object that encapsulates the result.\nAmongst others, it has ``shape`` and ``nd`` properties, and\nmay be used as an iterator.", "type_name": "broadcast object", "is_generator": false, "return_name": "b"}}], ["localhost:8000/find_common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array_types"], "description": "A list of dtypes or dtype convertible objects representing arrays.", "arg_name": "array_types", "type_name": "sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "scalar_types"], "description": "A list of dtypes or dtype convertible objects representing scalars.", "arg_name": "scalar_types", "type_name": "sequence", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The common data type, which is the maximum of `array_types` ignoring\n`scalar_types`, unless the maximum of `scalar_types` is of a\ndifferent kind (`dtype.kind`). If the kind is not understood, then\nNone is returned.", "type_name": "dtype", "is_generator": false, "return_name": "datatype"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The common data type, which is the maximum of `array_types` ignoring\n`scalar_types`, unless the maximum of `scalar_types` is of a\ndifferent kind (`dtype.kind`). If the kind is not understood, then\nNone is returned.", "type_name": "dtype", "is_generator": false, "return_name": "datatype"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/fromfunction", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}], ["localhost:8000/broadcast", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "in1, in2, ..."], "description": "Input parameters.", "arg_name": "in1, in2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Broadcast the input parameters against one another, and\nreturn an object that encapsulates the result.\nAmongst others, it has ``shape`` and ``nd`` properties, and\nmay be used as an iterator.", "type_name": "broadcast object", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Broadcast the input parameters against one another, and\nreturn an object that encapsulates the result.\nAmongst others, it has ``shape`` and ``nd`` properties, and\nmay be used as an iterator.", "type_name": "broadcast object", "is_generator": false, "return_name": "b"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/iterable", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "y"], "description": "Input object.", "arg_name": "y", "type_name": "object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return ``True`` if the object has an iterator method or is a\nsequence and ``False`` otherwise.", "type_name": "bool", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return ``True`` if the object has an iterator method or is a\nsequence and ``False`` otherwise.", "type_name": "bool", "is_generator": false, "return_name": "b"}}], ["localhost:8000/vander", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "1-D input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of columns in the output.  If `N` is not specified, a square\narray is returned (``N = len(x)``).", "arg_name": "N", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "increasing"], "description": "Order of the powers of the columns.  If True, the powers increase\nfrom left to right, if False (the default) they are reversed.\n\n.. versionadded:: 1.9.0", "arg_name": "increasing", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vandermonde matrix.  If `increasing` is False, the first column is\n``x^(N-1)``, the second ``x^(N-2)`` and so forth. If `increasing` is\nTrue, the columns are ``x^0, x^1, ..., x^(N-1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vandermonde matrix.  If `increasing` is False, the first column is\n``x^(N-1)``, the second ``x^(N-2)`` and so forth. If `increasing` is\nTrue, the columns are ``x^0, x^1, ..., x^(N-1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/triu_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The size of the arrays for which the returned indices will\nbe valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `triu` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.  Can be used\nto slice a ndarray of shape(`n`, `n`).", "type_name": "tuple, shape(2) of ndarrays, shape(`n`)", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.  Can be used\nto slice a ndarray of shape(`n`, `n`).", "type_name": "tuple, shape(2) of ndarrays, shape(`n`)", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/sin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Angle, in radians (:math:`2 \\pi` rad equals 360 degrees).", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sine of each element of x.\nThis is a scalar if `x` is a scalar.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sine of each element of x.\nThis is a scalar if `x` is a scalar.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}], ["localhost:8000/shape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/block", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays"], "description": "If passed a single ndarray or scalar (a nested list of depth 0), this\nis returned unmodified (and not copied).\n\nElements shapes must match along the appropriate axes (without\nbroadcasting), but leading 1s will be prepended to the shape as\nnecessary to make the dimensions match.", "arg_name": "arrays", "type_name": "nested list of array_like or scalars (but not tuples)", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The array assembled from the given blocks.\n\nThe dimensionality of the output is equal to the greatest of:\n* the dimensionality of all the inputs\n* the depth to which the input list is nested", "type_name": "ndarray", "is_generator": false, "return_name": "block_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The array assembled from the given blocks.\n\nThe dimensionality of the output is equal to the greatest of:\n* the dimensionality of all the inputs\n* the depth to which the input list is nested", "type_name": "ndarray", "is_generator": false, "return_name": "block_array"}}], ["localhost:8000/shape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/sinh", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The corresponding hyperbolic sine values.\nThis is a scalar if `x` is a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The corresponding hyperbolic sine values.\nThis is a scalar if `x` is a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}], ["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}], [["localhost:8000/byte_bounds", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array. It must conform to the Python-side of the array\ninterface.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The first integer is the first byte of the array, the second\ninteger is just past the last byte of the array.  If `a` is not\ncontiguous it will not use every byte between the (`low`, `high`)\nvalues.", "type_name": "tuple of 2 integers", "is_generator": false, "return_name": "(low, high)"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The first integer is the first byte of the array, the second\ninteger is just past the last byte of the array.  If `a` is not\ncontiguous it will not use every byte between the (`low`, `high`)\nvalues.", "type_name": "tuple of 2 integers", "is_generator": false, "return_name": "(low, high)"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/compare_chararrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Arrays to be compared.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "cmp_op"], "description": "Type of comparison.", "arg_name": "cmp_op", "type_name": "{\"<\", \"<=\", \"==\", \">=\", \">\", \"!=\"}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rstrip"], "description": "If True, the spaces at the end of Strings are removed before the comparison.", "arg_name": "rstrip", "type_name": "Boolean", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array of type Boolean with the same shape as a and b.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array of type Boolean with the same shape as a and b.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/shape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}]]]
[["localhost:8000/nditer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags"], "description": "Flags to control the behavior of the iterator.\n\n* ``buffered`` enables buffering when required.\n* ``c_index`` causes a C-order index to be tracked.\n* ``f_index`` causes a Fortran-order index to be tracked.\n* ``multi_index`` causes a multi-index, or a tuple of indices\n  with one per iteration dimension, to be tracked.\n* ``common_dtype`` causes all the operands to be converted to\n  a common data type, with copying or buffering as necessary.\n* ``copy_if_overlap`` causes the iterator to determine if read\n  operands have overlap with write operands, and make temporary\n  copies as necessary to avoid overlap. False positives (needless\n  copying) are possible in some cases.\n* ``delay_bufalloc`` delays allocation of the buffers until\n  a reset() call is made. Allows ``allocate`` operands to\n  be initialized before their values are copied into the buffers.\n* ``external_loop`` causes the ``values`` given to be\n  one-dimensional arrays with multiple values instead of\n  zero-dimensional arrays.\n* ``grow_inner`` allows the ``value`` array sizes to be made\n  larger than the buffer size when both ``buffered`` and\n  ``external_loop`` is used.\n* ``ranged`` allows the iterator to be restricted to a sub-range\n  of the iterindex values.\n* ``refs_ok`` enables iteration of reference types, such as\n  object arrays.\n* ``reduce_ok`` enables iteration of ``readwrite`` operands\n  which are broadcasted, also known as reduction operands.\n* ``zerosize_ok`` allows `itersize` to be zero.", "arg_name": "flags", "type_name": "sequence of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_flags"], "description": "This is a list of flags for each operand. At minimum, one of\n``readonly``, ``readwrite``, or ``writeonly`` must be specified.\n\n* ``readonly`` indicates the operand will only be read from.\n* ``readwrite`` indicates the operand will be read from and written to.\n* ``writeonly`` indicates the operand will only be written to.\n* ``no_broadcast`` prevents the operand from being broadcasted.\n* ``contig`` forces the operand data to be contiguous.\n* ``aligned`` forces the operand data to be aligned.\n* ``nbo`` forces the operand data to be in native byte order.\n* ``copy`` allows a temporary read-only copy if required.\n* ``updateifcopy`` allows a temporary read-write copy if required.\n* ``allocate`` causes the array to be allocated if it is None\n  in the ``op`` parameter.\n* ``no_subtype`` prevents an ``allocate`` operand from using a subtype.\n* ``arraymask`` indicates that this operand is the mask to use\n  for selecting elements when writing to operands with the\n  'writemasked' flag set. The iterator does not enforce this,\n  but when writing from a buffer back to the array, it only\n  copies those elements indicated by this mask.\n* ``writemasked`` indicates that only elements where the chosen\n  ``arraymask`` operand is True will be written to.\n* ``overlap_assume_elementwise`` can be used to mark operands that are\n  accessed only in the iterator order, to allow less conservative\n  copying when ``copy_if_overlap`` is present.", "arg_name": "op_flags", "type_name": "list of list of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_dtypes"], "description": "The required data type(s) of the operands. If copying or buffering\nis enabled, the data will be converted to/from their original types.", "arg_name": "op_dtypes", "type_name": "dtype or tuple of dtype(s)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Controls the iteration order. 'C' means C order, 'F' means\nFortran order, 'A' means 'F' order if all the arrays are Fortran\ncontiguous, 'C' order otherwise, and 'K' means as close to the\norder the array elements appear in memory as possible. This also\naffects the element memory order of ``allocate`` operands, as they\nare allocated to be compatible with iteration order.\nDefault is 'K'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when making a copy\nor buffering.  Setting this to 'unsafe' is not recommended,\nas it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all.\n* 'equiv' means only byte-order changes are allowed.\n* 'safe' means only casts which can preserve values are allowed.\n* 'same_kind' means only safe casts or casts within a kind,\n  like float64 to float32, are allowed.\n* 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op_axes"], "description": "If provided, is a list of ints or None for each operands.\nThe list of axes for an operand is a mapping from the dimensions\nof the iterator to the dimensions of the operand. A value of\n-1 can be placed for entries, causing that dimension to be\ntreated as `newaxis`.", "arg_name": "op_axes", "type_name": "list of list of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "itershape"], "description": "The desired shape of the iterator. This allows ``allocate`` operands\nwith a dimension mapped by op_axes not corresponding to a dimension\nof a different operand to get a value not equal to 1 for that\ndimension.", "arg_name": "itershape", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffersize"], "description": "When buffering is enabled, controls the size of the temporary\nbuffers. Set to 0 for the default value.", "arg_name": "buffersize", "type_name": "int", "is_optional": true, "default": "value."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "dtypes"], "description": "The data types of the values provided in `value`. This may be\ndifferent from the operand data types if buffering is enabled.\nValid only before the iterator is closed.", "arg_name": "dtypes", "type_name": "tuple of dtype(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "finished"], "description": "Whether the iteration over the operands is finished or not.", "arg_name": "finished", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_delayed_bufalloc"], "description": "If True, the iterator was created with the ``delay_bufalloc`` flag,\nand no reset() function was called on it yet.", "arg_name": "has_delayed_bufalloc", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_index"], "description": "If True, the iterator was created with either the ``c_index`` or\nthe ``f_index`` flag, and the property `index` can be used to\nretrieve it.", "arg_name": "has_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "has_multi_index"], "description": "If True, the iterator was created with the ``multi_index`` flag,\nand the property `multi_index` can be used to retrieve it.", "arg_name": "has_multi_index", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "index"], "description": "When the ``c_index`` or ``f_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\nand ``has_index`` is False.", "arg_name": "index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterationneedsapi"], "description": "Whether iteration requires access to the Python API, for example\nif one of the operands is an object array.", "arg_name": "iterationneedsapi", "type_name": "bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "iterindex"], "description": "An index which matches the order of iteration.", "arg_name": "iterindex", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itersize"], "description": "Size of the iterator.", "arg_name": "itersize", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "itviews"], "description": "Structured view(s) of `operands` in memory, matching the reordered\nand optimized iterator access pattern. Valid only before the iterator\nis closed.", "arg_name": "itviews", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "multi_index"], "description": "When the ``multi_index`` flag was used, this property\nprovides access to the index. Raises a ValueError if accessed\naccessed and ``has_multi_index`` is False.", "arg_name": "multi_index", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "ndim"], "description": "The dimensions of the iterator.", "arg_name": "ndim", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "nop"], "description": "The number of iterator operands.", "arg_name": "nop", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "operands"], "description": "The array(s) to be iterated over. Valid only before the iterator is\nclosed.", "arg_name": "operands", "type_name": "tuple of operand(s)", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "shape"], "description": "Shape tuple, the shape of the iterator.", "arg_name": "shape", "type_name": "tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "value"], "description": "Value of ``operands`` at current iteration. Normally, this is a\ntuple of array scalars, but if the flag ``external_loop`` is used,\nit is a tuple of one dimensional arrays.", "arg_name": "value", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}], ["localhost:8000/isclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns a boolean array of where `a` and `b` are equal within the\ngiven tolerance. If both `a` and `b` are scalars, returns a single\nboolean value.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns a boolean array of where `a` and `b` are equal within the\ngiven tolerance. If both `a` and `b` are scalars, returns a single\nboolean value.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}]]]
[["localhost:8000/nested_iters", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Each item is used as an \"op_axes\" argument to an nditer", "arg_name": "axes", "type_name": "list of list of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags, op_flags, op_dtypes, order, casting, buffersize (optional)"], "description": "See `nditer` parameters of the same name", "arg_name": "flags, op_flags, op_dtypes, order, casting, buffersize (optional)", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An nditer for each item in `axes`, outermost first", "type_name": "tuple of nditer", "is_generator": false, "return_name": "iters"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}], [["localhost:8000/bartlett", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/nested_iters", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Each item is used as an \"op_axes\" argument to an nditer", "arg_name": "axes", "type_name": "list of list of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags, op_flags, op_dtypes, order, casting, buffersize (optional)"], "description": "See `nditer` parameters of the same name", "arg_name": "flags, op_flags, op_dtypes, order, casting, buffersize (optional)", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An nditer for each item in `axes`, outermost first", "type_name": "tuple of nditer", "is_generator": false, "return_name": "iters"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Each item is used as an \"op_axes\" argument to an nditer", "arg_name": "axes", "type_name": "list of list of int", "is_optional": false, "default": null}}], [["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}], ["localhost:8000/cumprod", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative product is computed.  By default\nthe input is flattened.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array, as well as of the accumulator in which\nthe elements are multiplied.  If *dtype* is not specified, it\ndefaults to the dtype of `a`, unless `a` has an integer dtype with\na precision less than that of the default platform integer.  In\nthat case, the default platform integer is used instead.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type of the resulting values will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to out is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "cumprod"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to out is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "cumprod"}}]]]
[["localhost:8000/nested_iters", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op"], "description": "The array(s) to iterate over.", "arg_name": "op", "type_name": "ndarray or sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Each item is used as an \"op_axes\" argument to an nditer", "arg_name": "axes", "type_name": "list of list of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags, op_flags, op_dtypes, order, casting, buffersize (optional)"], "description": "See `nditer` parameters of the same name", "arg_name": "flags, op_flags, op_dtypes, order, casting, buffersize (optional)", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An nditer for each item in `axes`, outermost first", "type_name": "tuple of nditer", "is_generator": false, "return_name": "iters"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "flags, op_flags, op_dtypes, order, casting, buffersize (optional)"], "description": "See `nditer` parameters of the same name", "arg_name": "flags, op_flags, op_dtypes, order, casting, buffersize (optional)", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/histogram", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data. The histogram is computed over the flattened array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bins"], "description": "If `bins` is an int, it defines the number of equal-width\nbins in the given range (10, by default). If `bins` is a\nsequence, it defines a monotonically increasing array of bin edges,\nincluding the rightmost edge, allowing for non-uniform bin widths.\n\n.. versionadded:: 1.11.0\n\nIf `bins` is a string, it defines the method used to calculate the\noptimal bin width, as defined by `histogram_bin_edges`.", "arg_name": "bins", "type_name": "int or sequence of scalars or str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "range"], "description": "The lower and upper range of the bins.  If not provided, range\nis simply ``(a.min(), a.max())``.  Values outside the range are\nignored. The first element of the range must be less than or\nequal to the second. `range` affects the automatic bin\ncomputation as well. While bin width is computed to be optimal\nbased on the actual data within `range`, the bin count will fill\nthe entire range including portions containing no data.", "arg_name": "range", "type_name": "(float, float)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "normed"], "description": ".. deprecated:: 1.6.0\n\nThis is equivalent to the `density` argument, but produces incorrect\nresults for unequal bin widths. It should not be used.\n\n.. versionchanged:: 1.15.0\n    DeprecationWarnings are actually emitted.", "arg_name": "normed", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights, of the same shape as `a`.  Each value in\n`a` only contributes its associated weight towards the bin count\n(instead of 1). If `density` is True, the weights are\nnormalized, so that the integral of the density over the range\nremains 1.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "density"], "description": "If ``False``, the result will contain the number of samples in\neach bin. If ``True``, the result is the value of the\nprobability *density* function at the bin, normalized such that\nthe *integral* over the range is 1. Note that the sum of the\nhistogram values will not be equal to 1 unless bins of unity\nwidth are chosen; it is not a probability *mass* function.\n\nOverrides the ``normed`` keyword if given.", "arg_name": "density", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The values of the histogram. See `density` and `weights` for a\ndescription of the possible semantics.", "type_name": "array", "is_generator": false, "return_name": "hist"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The values of the histogram. See `density` and `weights` for a\ndescription of the possible semantics.", "type_name": "array", "is_generator": false, "return_name": "hist"}}], ["localhost:8000/fromfunction", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}]]]
[["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/datetime_data", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The dtype object, which must be a `datetime64` or `timedelta64` type.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}], ["localhost:8000/atleast_1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more input arrays.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}]]]
[["localhost:8000/arange", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}], [["localhost:8000/blackman", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an empty\narray is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/hanning", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if `M` is odd).", "type_name": "ndarray, shape(M,)", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if `M` is odd).", "type_name": "ndarray, shape(M,)", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/arange", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}], [["localhost:8000/percentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.\n\n.. versionchanged:: 1.9.0\n    A tuple of axes is supported", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.\n\n.. versionadded:: 1.9.0", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/arange", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}]]]
[["localhost:8000/arange", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}], [["localhost:8000/nanpercentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/arange", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/arange", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "Start of interval.  The interval includes this value.  The default\nstart value is 0.", "arg_name": "start", "type_name": "integer or real", "is_optional": true, "default": "start"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "stop"], "description": "End of interval.  The interval does not include this value, except\nin some cases where `step` is not an integer and floating point\nround-off affects the length of `out`.", "arg_name": "stop", "type_name": "integer or real", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "step"], "description": "Spacing between values.  For any output `out`, this is the distance\nbetween two adjacent values, ``out[i+1] - out[i]``.  The default\nstep size is 1.  If `step` is specified as a position argument,\n`start` must also be given.", "arg_name": "step", "type_name": "integer or real", "is_optional": true, "default": "step"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the output array.  If `dtype` is not given, infer the data\ntype from the other input arguments.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of evenly spaced values.\n\nFor floating point arguments, the length of the result is\n``ceil((stop - start)/step)``.  Because of floating point overflow,\nthis rule may result in the last element of `out` being greater\nthan `stop`.", "type_name": "ndarray", "is_generator": false, "return_name": "arange"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}], [["localhost:8000/tri", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the array.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the array.\nBy default, `M` is taken equal to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "The sub-diagonal at and below which the array is filled.\n`k` = 0 is the main diagonal, while `k` < 0 is below it,\nand `k` > 0 is above.  The default is 0.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.  The default is float.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}], ["localhost:8000/inner", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "If `a` and `b` are nonscalar, their last dimensions must match.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`out.shape = a.shape[:-1] + b.shape[:-1]`", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`out.shape = a.shape[:-1] + b.shape[:-1]`", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/meshgrid", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2,..., xn"], "description": "1-D arrays representing the coordinates of a grid.", "arg_name": "x1, x2,..., xn", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "indexing"], "description": "Cartesian ('xy', default) or matrix ('ij') indexing of output.\nSee Notes for more details.\n\n.. versionadded:: 1.7.0", "arg_name": "indexing", "type_name": "{'xy', 'ij'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "If True a sparse grid is returned in order to conserve memory.\nDefault is False.\n\n.. versionadded:: 1.7.0", "arg_name": "sparse", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If False, a view into the original arrays are returned in order to\nconserve memory.  Default is True.  Please note that\n``sparse=False, copy=False`` will likely return non-contiguous\narrays.  Furthermore, more than one element of a broadcast array\nmay refer to a single memory location.  If you need to write to the\narrays, make copies first.\n\n.. versionadded:: 1.7.0", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": "True."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}], ["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}]]]
[["localhost:8000/zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}], [["localhost:8000/asfortranarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "str or dtype object", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input `a` in Fortran, or column-major, order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input `a` in Fortran, or column-major, order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/unpackbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray, uint8 type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-unpacking is done.\n``None`` implies unpacking the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of elements to unpack along `axis`, provided as a way\nof undoing the effect of packing a size that is not a multiple\nof eight. A non-negative number means to only unpack `count`\nbits. A negative number means to trim off that many bits from\nthe end. ``None`` means to unpack the entire array (the\ndefault). Counts larger than the available number of bits will\nadd zero padding to the output. Negative counts must not\nexceed the available number of bits.\n\n.. versionadded:: 1.17.0", "arg_name": "count", "type_name": "int or None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the returned bits. 'big' will mimic bin(val),\n``3 = 0b00000011 => [0, 0, 0, 0, 0, 0, 1, 1]``, 'little' will reverse\nthe order to ``[1, 1, 0, 0, 0, 0, 0, 0]``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}]]]
[["localhost:8000/zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/count_nonzero", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array for which to count non-zeros.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or tuple of axes along which to count non-zeros.\nDefault is None, meaning that non-zeros will be counted\nalong a flattened version of ``a``.\n\n.. versionadded:: 1.12.0", "arg_name": "axis", "type_name": "int or tuple", "is_optional": true, "default": "None"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes that are counted are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\n.. versionadded:: 1.19.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Number of non-zero values in the array along a given axis.\nOtherwise, the total number of non-zero values in the array\nis returned.", "type_name": "int or array of int", "is_generator": false, "return_name": "count"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array for which to count non-zeros.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/nanstd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Calculate the standard deviation of the non-NaN values.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the standard deviation is computed. The default is\nto compute the standard deviation of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the standard deviation. For arrays of\ninteger type the default is float64, for arrays of float types it\nis the same as the array type.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "float64"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output but the type (of the\ncalculated values) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ddof"], "description": "Means Delta Degrees of Freedom.  The divisor used in calculations\nis ``N - ddof``, where ``N`` represents the number of non-NaN\nelements.  By default `ddof` is zero.", "arg_name": "ddof", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this value is anything but the default it is passed through\nas-is to the relevant functions of the sub-classes.  If these\nfunctions do not have a `keepdims` kwarg, a RuntimeError will\nbe raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "it"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the standard\ndeviation, otherwise return a reference to the output array. If\nddof is >= the number of non-NaN elements in a slice or the slice\ncontains only NaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above.", "is_generator": false, "return_name": "standard_deviation"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the standard\ndeviation, otherwise return a reference to the output array. If\nddof is >= the number of non-NaN elements in a slice or the slice\ncontains only NaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above.", "is_generator": false, "return_name": "standard_deviation"}}], ["localhost:8000/count_nonzero", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array for which to count non-zeros.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or tuple of axes along which to count non-zeros.\nDefault is None, meaning that non-zeros will be counted\nalong a flattened version of ``a``.\n\n.. versionadded:: 1.12.0", "arg_name": "axis", "type_name": "int or tuple", "is_optional": true, "default": "None"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes that are counted are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\n.. versionadded:: 1.19.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Number of non-zero values in the array along a given axis.\nOtherwise, the total number of non-zero values in the array\nis returned.", "type_name": "int or array of int", "is_generator": false, "return_name": "count"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Number of non-zero values in the array along a given axis.\nOtherwise, the total number of non-zero values in the array\nis returned.", "type_name": "int or array of int", "is_generator": false, "return_name": "count"}}]]]
[["localhost:8000/count_nonzero", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array for which to count non-zeros.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or tuple of axes along which to count non-zeros.\nDefault is None, meaning that non-zeros will be counted\nalong a flattened version of ``a``.\n\n.. versionadded:: 1.12.0", "arg_name": "axis", "type_name": "int or tuple", "is_optional": true, "default": "None"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes that are counted are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\n.. versionadded:: 1.19.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Number of non-zero values in the array along a given axis.\nOtherwise, the total number of non-zero values in the array\nis returned.", "type_name": "int or array of int", "is_generator": false, "return_name": "count"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or tuple of axes along which to count non-zeros.\nDefault is None, meaning that non-zeros will be counted\nalong a flattened version of ``a``.\n\n.. versionadded:: 1.12.0", "arg_name": "axis", "type_name": "int or tuple", "is_optional": true, "default": "None"}}], [["localhost:8000/percentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.\n\n.. versionchanged:: 1.9.0\n    A tuple of axes is supported", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.\n\n.. versionadded:: 1.9.0", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/nanpercentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}]]]
[["localhost:8000/count_nonzero", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array for which to count non-zeros.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or tuple of axes along which to count non-zeros.\nDefault is None, meaning that non-zeros will be counted\nalong a flattened version of ``a``.\n\n.. versionadded:: 1.12.0", "arg_name": "axis", "type_name": "int or tuple", "is_optional": true, "default": "None"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes that are counted are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\n.. versionadded:: 1.19.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Number of non-zero values in the array along a given axis.\nOtherwise, the total number of non-zero values in the array\nis returned.", "type_name": "int or array of int", "is_generator": false, "return_name": "count"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes that are counted are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\n.. versionadded:: 1.19.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], [["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], [["localhost:8000/meshgrid", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2,..., xn"], "description": "1-D arrays representing the coordinates of a grid.", "arg_name": "x1, x2,..., xn", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "indexing"], "description": "Cartesian ('xy', default) or matrix ('ij') indexing of output.\nSee Notes for more details.\n\n.. versionadded:: 1.7.0", "arg_name": "indexing", "type_name": "{'xy', 'ij'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "If True a sparse grid is returned in order to conserve memory.\nDefault is False.\n\n.. versionadded:: 1.7.0", "arg_name": "sparse", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If False, a view into the original arrays are returned in order to\nconserve memory.  Default is True.  Please note that\n``sparse=False, copy=False`` will likely return non-contiguous\narrays.  Furthermore, more than one element of a broadcast array\nmay refer to a single memory location.  If you need to write to the\narrays, make copies first.\n\n.. versionadded:: 1.7.0", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": "True."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}], ["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}]]]
[["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}], [["localhost:8000/asfortranarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "str or dtype object", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input `a` in Fortran, or column-major, order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input `a` in Fortran, or column-major, order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/unpackbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray, uint8 type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-unpacking is done.\n``None`` implies unpacking the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of elements to unpack along `axis`, provided as a way\nof undoing the effect of packing a size that is not a multiple\nof eight. A non-negative number means to only unpack `count`\nbits. A negative number means to trim off that many bits from\nthe end. ``None`` means to unpack the entire array (the\ndefault). Counts larger than the available number of bits will\nadd zero padding to the output. Negative counts must not\nexceed the available number of bits.\n\n.. versionadded:: 1.17.0", "arg_name": "count", "type_name": "int or None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the returned bits. 'big' will mimic bin(val),\n``3 = 0b00000011 => [0, 0, 0, 0, 0, 0, 1, 1]``, 'little' will reverse\nthe order to ``[1, 1, 0, 0, 0, 0, 0, 0]``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}]]]
[["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/broadcast", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "in1, in2, ..."], "description": "Input parameters.", "arg_name": "in1, in2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Broadcast the input parameters against one another, and\nreturn an object that encapsulates the result.\nAmongst others, it has ``shape`` and ``nd`` properties, and\nmay be used as an iterator.", "type_name": "broadcast object", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "in1, in2, ..."], "description": "Input parameters.", "arg_name": "in1, in2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/fromstring", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}], [["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/array_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_line_width"], "description": "Inserts newlines if text is longer than `max_line_width`.\nDefaults to ``numpy.get_printoptions()['linewidth']``.", "arg_name": "max_line_width", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "precision"], "description": "Floating point precision.\nDefaults to ``numpy.get_printoptions()['precision']``.", "arg_name": "precision", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "suppress_small"], "description": "Represent numbers \"very close\" to zero as zero; default is False.\nVery close is defined by precision: if the precision is 8, e.g.,\nnumbers smaller (in absolute value) than 5e-9 are represented as\nzero.\nDefaults to ``numpy.get_printoptions()['suppress']``.", "arg_name": "suppress_small", "type_name": "bool", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The string representation of an array.", "type_name": "str", "is_generator": false, "return_name": "string"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The string representation of an array.", "type_name": "str", "is_generator": false, "return_name": "string"}}]]]
[["localhost:8000/fromstring", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/fromstring", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/blackman", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an empty\narray is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/fromstring", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/fromstring", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "string"], "description": "A string containing the data.", "arg_name": "string", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Read this number of `dtype` elements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "The string separating numbers in the data; extra whitespace between\nelements is also ignored.\n\n.. deprecated:: 1.14\n    Passing ``sep=''``, the default, is deprecated since it will\n    trigger the deprecated binary mode of this function. This mode\n    interprets `string` as binary bytes, rather than ASCII text with\n    decimal numbers, an operation which is better spelt\n    ``frombuffer(string, dtype, count)``. If `string` contains unicode\n    text, the binary mode of `fromstring` will first encode it into\n    bytes using either utf-8 (python 3) or the default encoding\n    (python 2), neither of which produce sane results.", "arg_name": "sep", "type_name": "str", "is_optional": true, "default": "encoding"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The constructed array.", "type_name": "ndarray", "is_generator": false, "return_name": "arr"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}], [["localhost:8000/genfromtxt", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fname"], "description": "File, filename, list, or generator to read.  If the filename\nextension is `.gz` or `.bz2`, the file is first decompressed. Note\nthat generators must return byte strings. The strings\nin a list or produced by a generator are treated as lines.", "arg_name": "fname", "type_name": "file, str, pathlib.Path, list of str, generator", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the resulting array.\nIf None, the dtypes will be determined by the contents of each\ncolumn, individually.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "comments"], "description": "The character used to indicate the start of a comment.\nAll the characters occurring on a line after a comment are discarded", "arg_name": "comments", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "delimiter"], "description": "The string used to separate values.  By default, any consecutive\nwhitespaces act as delimiter.  An integer or sequence of integers\ncan also be provided as width(s) of each field.", "arg_name": "delimiter", "type_name": "str, int, or sequence", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skiprows"], "description": "`skiprows` was removed in numpy 1.10. Please use `skip_header` instead.", "arg_name": "skiprows", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skip_header"], "description": "The number of lines to skip at the beginning of the file.", "arg_name": "skip_header", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "skip_footer"], "description": "The number of lines to skip at the end of the file.", "arg_name": "skip_footer", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "converters"], "description": "The set of functions that convert the data of a column to a value.\nThe converters can also be used to provide a default value\nfor missing data: ``converters = {3: lambda s: float(s or 0)}``.", "arg_name": "converters", "type_name": "variable", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "missing"], "description": "`missing` was removed in numpy 1.10. Please use `missing_values`\ninstead.", "arg_name": "missing", "type_name": "variable", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "missing_values"], "description": "The set of strings corresponding to missing data.", "arg_name": "missing_values", "type_name": "variable", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filling_values"], "description": "The set of values to be used as default when the data are missing.", "arg_name": "filling_values", "type_name": "variable", "is_optional": true, "default": "when"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "usecols"], "description": "Which columns to read, with 0 being the first.  For example,\n``usecols = (1, 4, 5)`` will extract the 2nd, 5th and 6th columns.", "arg_name": "usecols", "type_name": "sequence", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "If `names` is True, the field names are read from the first line after\nthe first `skip_header` lines.  This line can optionally be proceeded\nby a comment delimiter. If `names` is a sequence or a single-string of\ncomma-separated names, the names will be used to define the field names\nin a structured dtype. If `names` is None, the names of the dtype\nfields will be used, if any.", "arg_name": "names", "type_name": "{None, True, str, sequence}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "excludelist"], "description": "A list of names to exclude. This list is appended to the default list\n['return','file','print']. Excluded names are appended an underscore:\nfor example, `file` would become `file_`.", "arg_name": "excludelist", "type_name": "sequence", "is_optional": true, "default": "list"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "deletechars"], "description": "A string combining invalid characters that must be deleted from the\nnames.", "arg_name": "deletechars", "type_name": "str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "defaultfmt"], "description": "A format used to define default field names, such as \"f%i\" or \"f_%02i\".", "arg_name": "defaultfmt", "type_name": "str", "is_optional": true, "default": "field"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "autostrip"], "description": "Whether to automatically strip white spaces from the variables.", "arg_name": "autostrip", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "replace_space"], "description": "Character(s) used in replacement of white spaces in the variables\nnames. By default, use a '_'.", "arg_name": "replace_space", "type_name": "char", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "case_sensitive"], "description": "If True, field names are case sensitive.\nIf False or 'upper', field names are converted to upper case.\nIf 'lower', field names are converted to lower case.", "arg_name": "case_sensitive", "type_name": "{True, False, 'upper', 'lower'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "unpack"], "description": "If True, the returned array is transposed, so that arguments may be\nunpacked using ``x, y, z = genfromtxt(...)``.  When used with a\nstructured data-type, arrays are returned for each field.\nDefault is False.", "arg_name": "unpack", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "usemask"], "description": "If True, return a masked array.\nIf False, return a regular array.", "arg_name": "usemask", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loose"], "description": "If True, do not raise errors for invalid values.", "arg_name": "loose", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "invalid_raise"], "description": "If True, an exception is raised if an inconsistency is detected in the\nnumber of columns.\nIf False, a warning is emitted and the offending lines are skipped.", "arg_name": "invalid_raise", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_rows"], "description": "The maximum number of rows to read. Must not be used with skip_footer\nat the same time.  If given, the value must be at least 1. Default is\nto read the entire file.\n\n.. versionadded:: 1.10.0", "arg_name": "max_rows", "type_name": "int,  optional", "is_optional": false, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "Encoding used to decode the inputfile. Does not apply when `fname` is\na file object.  The special value 'bytes' enables backward compatibility\nworkarounds that ensure that you receive byte arrays when possible\nand passes latin1 encoded strings to converters. Override this value to\nreceive unicode arrays and pass strings as input to converters.  If set\nto None the system default is used. The default value is 'bytes'.\n\n.. versionadded:: 1.14.0", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": "used."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file. If `usemask` is True, this is a\nmasked array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data read from the text file. If `usemask` is True, this is a\nmasked array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}], [["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/argwhere", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Indices of elements that are non-zero. Indices are grouped by element.\nThis array will have shape ``(N, a.ndim)`` where ``N`` is the number of\nnon-zero items.", "type_name": "(N, a.ndim) ndarray", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Indices of elements that are non-zero. Indices are grouped by element.\nThis array will have shape ``(N, a.ndim)`` where ``N`` is the number of\nnon-zero items.", "type_name": "(N, a.ndim) ndarray", "is_generator": false, "return_name": "index_array"}}], ["localhost:8000/atleast_1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more input arrays.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/load", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "The file to read. File-like objects must support the\n``seek()`` and ``read()`` methods. Pickled files require that the\nfile-like object support the ``readline()`` method as well.", "arg_name": "file", "type_name": "file-like object, string, or pathlib.Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mmap_mode"], "description": "If not None, then memory-map the file, using the given mode (see\n`numpy.memmap` for a detailed description of the modes).  A\nmemory-mapped array is kept on disk. However, it can be accessed\nand sliced like any ndarray.  Memory mapping is especially useful\nfor accessing small fragments of large files without reading the\nentire file into memory.", "arg_name": "mmap_mode", "type_name": "{None, 'r+', 'r', 'w+', 'c'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "allow_pickle"], "description": "Allow loading pickled object arrays stored in npy files. Reasons for\ndisallowing pickles include security, as loading pickled data can\nexecute arbitrary code. If pickles are disallowed, loading object\narrays will fail. Default: False\n\n.. versionchanged:: 1.16.3\n    Made default False in response to CVE-2019-6446.", "arg_name": "allow_pickle", "type_name": "bool", "is_optional": true, "default": "False"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fix_imports"], "description": "Only useful when loading Python 2 generated pickled files on Python 3,\nwhich includes npy/npz files containing object arrays. If `fix_imports`\nis True, pickle will try to map the old Python 2 names to the new names\nused in Python 3.", "arg_name": "fix_imports", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "encoding"], "description": "What encoding to use when reading Python 2 strings. Only useful when\nloading Python 2 generated pickled files in Python 3, which includes\nnpy/npz files containing object arrays. Values other than 'latin1',\n'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\ndata. Default: 'ASCII'", "arg_name": "encoding", "type_name": "str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data stored in the file. For ``.npz`` files, the returned instance\nof NpzFile class must be closed to avoid leaking file descriptors.", "type_name": "array, tuple, dict, etc.", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/fromfile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "file"], "description": "Open file object or filename.\n\n.. versionchanged:: 1.17.0\n    `pathlib.Path` objects are now accepted.", "arg_name": "file", "type_name": "file or str or Path", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.\n\n.. versionadded:: 1.18.0\n    Complex dtypes.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all items (i.e., the complete\nfile).", "arg_name": "count", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sep"], "description": "Separator between items if file is a text file.\nEmpty (\"\") separator means the file should be treated as binary.\nSpaces (\" \") in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.", "arg_name": "sep", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "The offset (in bytes) from the file's current position. Defaults to 0.\nOnly permitted for binary files.\n\n.. versionadded:: 1.17.0", "arg_name": "offset", "type_name": "int", "is_optional": false, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "See also"], "description": null, "arg_name": "See also", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "--------"], "description": null, "arg_name": "--------", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "load, save"], "description": null, "arg_name": "load, save", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndarray.tofile"], "description": null, "arg_name": "ndarray.tofile", "type_name": null, "is_optional": null, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "loadtxt"], "description": null, "arg_name": "loadtxt", "type_name": "More flexible way of loading data from a text file.", "is_optional": false, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/test", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["attribute", "module_name"], "description": "Full path to the package to test.", "arg_name": "module_name", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "module_name"], "description": "The name of the module to test.", "arg_name": "module_name", "type_name": "module name", "is_optional": false, "default": null}}], "returns": null}, null]]]
[["localhost:8000/frombuffer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "An object that exposes the buffer interface.", "arg_name": "buffer", "type_name": "buffer_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array; default: float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all data in the buffer.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Start reading the buffer from this offset (in bytes); default: 0.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "An object that exposes the buffer interface.", "arg_name": "buffer", "type_name": "buffer_like", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/frombuffer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "An object that exposes the buffer interface.", "arg_name": "buffer", "type_name": "buffer_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array; default: float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all data in the buffer.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Start reading the buffer from this offset (in bytes); default: 0.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array; default: float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}], [["localhost:8000/mean", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose mean is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the means are computed. The default is to\ncompute the mean of the flattened array.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a mean is performed over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the mean.  For integer inputs, the default\nis `float64`; for floating point inputs, it is the same as the\ninput dtype.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `mean` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in the mean. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/frombuffer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "An object that exposes the buffer interface.", "arg_name": "buffer", "type_name": "buffer_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array; default: float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all data in the buffer.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Start reading the buffer from this offset (in bytes); default: 0.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all data in the buffer.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/bincount", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like, 1 dimension, nonnegative ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "Weights, array of the same shape as `x`.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "minlength"], "description": "A minimum number of bins for the output array.\n\n.. versionadded:: 1.6.0", "arg_name": "minlength", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of binning the input array.\nThe length of `out` is equal to ``np.amax(x)+1``.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of binning the input array.\nThe length of `out` is equal to ``np.amax(x)+1``.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "out"}}], ["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/frombuffer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "An object that exposes the buffer interface.", "arg_name": "buffer", "type_name": "buffer_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array; default: float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all data in the buffer.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Start reading the buffer from this offset (in bytes); default: 0.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Start reading the buffer from this offset (in bytes); default: 0.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "0."}}], [["localhost:8000/unpackbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray, uint8 type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-unpacking is done.\n``None`` implies unpacking the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of elements to unpack along `axis`, provided as a way\nof undoing the effect of packing a size that is not a multiple\nof eight. A non-negative number means to only unpack `count`\nbits. A negative number means to trim off that many bits from\nthe end. ``None`` means to unpack the entire array (the\ndefault). Counts larger than the available number of bits will\nadd zero padding to the output. Negative counts must not\nexceed the available number of bits.\n\n.. versionadded:: 1.17.0", "arg_name": "count", "type_name": "int or None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the returned bits. 'big' will mimic bin(val),\n``3 = 0b00000011 => [0, 0, 0, 0, 0, 0, 1, 1]``, 'little' will reverse\nthe order to ``[1, 1, 0, 0, 0, 0, 0, 0]``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/frombuffer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buffer"], "description": "An object that exposes the buffer interface.", "arg_name": "buffer", "type_name": "buffer_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array; default: float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "Number of items to read. ``-1`` means all data in the buffer.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Start reading the buffer from this offset (in bytes); default: 0.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/where", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Where True, yield `x`, otherwise yield `y`.", "arg_name": "condition", "type_name": "array_like, bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x, y"], "description": "Values from which to choose. `x`, `y` and `condition` need to be\nbroadcastable to some shape.", "arg_name": "x, y", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with elements from `x` where `condition` is True, and elements\nfrom `y` elsewhere.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Where True, yield `x`, otherwise yield `y`.", "arg_name": "condition", "type_name": "array_like, bool", "is_optional": false, "default": null}}], [["localhost:8000/argsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}], ["localhost:8000/nan_to_num", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input data.", "arg_name": "x", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "Whether to create a copy of `x` (True) or to replace values\nin-place (False). The in-place operation only occurs if\ncasting to an array does not require a copy.\nDefault is True.\n\n.. versionadded:: 1.13", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": "True."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "nan"], "description": "Value to be used to fill NaN values. If no value is passed \nthen NaN values will be replaced with 0.0.\n\n.. versionadded:: 1.17", "arg_name": "nan", "type_name": "int, float", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "posinf"], "description": "Value to be used to fill positive infinity values. If no value is \npassed then positive infinity values will be replaced with a very\nlarge number.\n\n.. versionadded:: 1.17", "arg_name": "posinf", "type_name": "int, float", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "neginf"], "description": "Value to be used to fill negative infinity values. If no value is \npassed then negative infinity values will be replaced with a very\nsmall (or negative) number.\n\n.. versionadded:: 1.17", "arg_name": "neginf", "type_name": "int, float", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`x`, with the non-finite values replaced. If `copy` is False, this may\nbe `x` itself.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`x`, with the non-finite values replaced. If `copy` is False, this may\nbe `x` itself.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/where", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Where True, yield `x`, otherwise yield `y`.", "arg_name": "condition", "type_name": "array_like, bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x, y"], "description": "Values from which to choose. `x`, `y` and `condition` need to be\nbroadcastable to some shape.", "arg_name": "x, y", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with elements from `x` where `condition` is True, and elements\nfrom `y` elsewhere.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x, y"], "description": "Values from which to choose. `x`, `y` and `condition` need to be\nbroadcastable to some shape.", "arg_name": "x, y", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/nan_to_num", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input data.", "arg_name": "x", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "Whether to create a copy of `x` (True) or to replace values\nin-place (False). The in-place operation only occurs if\ncasting to an array does not require a copy.\nDefault is True.\n\n.. versionadded:: 1.13", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": "True."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "nan"], "description": "Value to be used to fill NaN values. If no value is passed \nthen NaN values will be replaced with 0.0.\n\n.. versionadded:: 1.17", "arg_name": "nan", "type_name": "int, float", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "posinf"], "description": "Value to be used to fill positive infinity values. If no value is \npassed then positive infinity values will be replaced with a very\nlarge number.\n\n.. versionadded:: 1.17", "arg_name": "posinf", "type_name": "int, float", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "neginf"], "description": "Value to be used to fill negative infinity values. If no value is \npassed then negative infinity values will be replaced with a very\nsmall (or negative) number.\n\n.. versionadded:: 1.17", "arg_name": "neginf", "type_name": "int, float", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`x`, with the non-finite values replaced. If `copy` is False, this may\nbe `x` itself.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`x`, with the non-finite values replaced. If `copy` is False, this may\nbe `x` itself.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/where", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Where True, yield `x`, otherwise yield `y`.", "arg_name": "condition", "type_name": "array_like, bool", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x, y"], "description": "Values from which to choose. `x`, `y` and `condition` need to be\nbroadcastable to some shape.", "arg_name": "x, y", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with elements from `x` where `condition` is True, and elements\nfrom `y` elsewhere.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with elements from `x` where `condition` is True, and elements\nfrom `y` elsewhere.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/argwhere", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Indices of elements that are non-zero. Indices are grouped by element.\nThis array will have shape ``(N, a.ndim)`` where ``N`` is the number of\nnon-zero items.", "type_name": "(N, a.ndim) ndarray", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array1, array2, ..."], "description": "Input arrays.", "arg_name": "array1, array2, ...", "type_name": "ndarrays", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/copyto", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dst"], "description": "The array into which values are copied.", "arg_name": "dst", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "src"], "description": "The array from which values are copied.", "arg_name": "src", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when copying.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "A boolean array which is broadcasted to match the dimensions\nof `dst`, and selects elements to copy from `src` to `dst`\nwherever it contains the value True.", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dst"], "description": "The array into which values are copied.", "arg_name": "dst", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/setxor1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ar1, ar2"], "description": "Input arrays.", "arg_name": "ar1, ar2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": false, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}]]]
[["localhost:8000/copyto", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dst"], "description": "The array into which values are copied.", "arg_name": "dst", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "src"], "description": "The array from which values are copied.", "arg_name": "src", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when copying.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "A boolean array which is broadcasted to match the dimensions\nof `dst`, and selects elements to copy from `src` to `dst`\nwherever it contains the value True.", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "src"], "description": "The array from which values are copied.", "arg_name": "src", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/setxor1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ar1, ar2"], "description": "Input arrays.", "arg_name": "ar1, ar2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": false, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Sorted 1D array of unique values that are in only one of the input\narrays.", "type_name": "ndarray", "is_generator": false, "return_name": "setxor1d"}}]]]
[["localhost:8000/copyto", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dst"], "description": "The array into which values are copied.", "arg_name": "dst", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "src"], "description": "The array from which values are copied.", "arg_name": "src", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when copying.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "A boolean array which is broadcasted to match the dimensions\nof `dst`, and selects elements to copy from `src` to `dst`\nwherever it contains the value True.", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when copying.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/copyto", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dst"], "description": "The array into which values are copied.", "arg_name": "dst", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "src"], "description": "The array from which values are copied.", "arg_name": "src", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur when copying.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "A boolean array which is broadcasted to match the dimensions\nof `dst`, and selects elements to copy from `src` to `dst`\nwherever it contains the value True.", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "A boolean array which is broadcasted to match the dimensions\nof `dst`, and selects elements to copy from `src` to `dst`\nwherever it contains the value True.", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], [["localhost:8000/imag", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "val"], "description": "Input array.", "arg_name": "val", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The imaginary component of the complex argument. If `val` is real,\nthe type of `val` is used for the output.  If `val` has complex\nelements, the returned type is float.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The imaginary component of the complex argument. If `val` is real,\nthe type of `val` is used for the output.  If `val` has complex\nelements, the returned type is float.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}], ["localhost:8000/var", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose variance is desired.  If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the variance is computed.  The default is to\ncompute the variance of the flattened array.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a variance is performed over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the variance.  For arrays of integer type\nthe default is `float64`; for arrays of float types it is the same as\nthe array type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output, but the type is cast if\nnecessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ddof"], "description": "\"Delta Degrees of Freedom\": the divisor used in the calculation is\n``N - ddof``, where ``N`` represents the number of elements. By\ndefault `ddof` is zero.", "arg_name": "ddof", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `var` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in the variance. See `~numpy.ufunc.reduce` for\ndetails.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If ``out=None``, returns a new array containing the variance;\notherwise, a reference to the output array is returned.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If ``out=None``, returns a new array containing the variance;\notherwise, a reference to the output array is returned.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}]]]
[["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}], [["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}], ["localhost:8000/piecewise", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input domain.", "arg_name": "x", "type_name": "ndarray or scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condlist"], "description": "Each boolean array corresponds to a function in `funclist`.  Wherever\n`condlist[i]` is True, `funclist[i](x)` is used as the output value.\n\nEach boolean array in `condlist` selects a piece of `x`,\nand should therefore be of the same shape as `x`.\n\nThe length of `condlist` must correspond to that of `funclist`.\nIf one extra function is given, i.e. if\n``len(funclist) == len(condlist) + 1``, then that extra function\nis the default value, used wherever all conditions are false.", "arg_name": "condlist", "type_name": "list of bool arrays or bool scalars", "is_optional": false, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "funclist"], "description": "Each function is evaluated over `x` wherever its corresponding\ncondition is True.  It should take a 1d array as input and give an 1d\narray or a scalar value as output.  If, instead of a callable,\na scalar is provided then a constant function (``lambda x: scalar``) is\nassumed.", "arg_name": "funclist", "type_name": "list of callables, f(x,*args,**kw), or scalars", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "args"], "description": "Any further arguments given to `piecewise` are passed to the functions\nupon execution, i.e., if called ``piecewise(..., ..., 1, 'a')``, then\neach function is called as ``f(x, 1, 'a')``.", "arg_name": "args", "type_name": "tuple", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kw"], "description": "Keyword arguments used in calling `piecewise` are passed to the\nfunctions upon execution, i.e., if called\n``piecewise(..., ..., alpha=1)``, then each function is called as\n``f(x, alpha=1)``.", "arg_name": "kw", "type_name": "dict", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output is the same shape and type as x and is found by\ncalling the functions in `funclist` on the appropriate portions of `x`,\nas defined by the boolean arrays in `condlist`.  Portions not covered\nby any condition have a default value of 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output is the same shape and type as x and is found by\ncalling the functions in `funclist` on the appropriate portions of `x`,\nas defined by the boolean arrays in `condlist`.  Portions not covered\nby any condition have a default value of 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}], [["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}], ["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}]]]
[["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/lexsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keys"], "description": "The `k` different \"columns\" to be sorted.  The last column (or row if\n`keys` is a 2D array) is the primary sort key.", "arg_name": "keys", "type_name": "(k, N) array or tuple containing k (N,)-shaped sequences", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis to be indirectly sorted.  By default, sort over the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort the keys along the specified axis.", "type_name": "(N,) ndarray of ints", "is_generator": false, "return_name": "indices"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keys"], "description": "The `k` different \"columns\" to be sorted.  The last column (or row if\n`keys` is a 2D array) is the primary sort key.", "arg_name": "keys", "type_name": "(k, N) array or tuple containing k (N,)-shaped sequences", "is_optional": false, "default": null}}], [["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}], ["localhost:8000/nanquantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n* linear: ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* lower: ``i``.\n* higher: ``j``.\n* nearest: ``i`` or ``j``, whichever is nearest.\n* midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}]]]
[["localhost:8000/lexsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keys"], "description": "The `k` different \"columns\" to be sorted.  The last column (or row if\n`keys` is a 2D array) is the primary sort key.", "arg_name": "keys", "type_name": "(k, N) array or tuple containing k (N,)-shaped sequences", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis to be indirectly sorted.  By default, sort over the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort the keys along the specified axis.", "type_name": "(N,) ndarray of ints", "is_generator": false, "return_name": "indices"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis to be indirectly sorted.  By default, sort over the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}], ["localhost:8000/flip", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": "Input array.", "arg_name": "m", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to flip over. The default,\naxis=None, will flip over all of the axes of the input array.\nIf axis is negative it counts from the last to the first axis.\n\nIf axis is a tuple of ints, flipping is performed on all of the axes\nspecified in the tuple.\n\n.. versionchanged:: 1.15.0\n   None and tuples of axes are supported", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A view of `m` with the entries of axis reversed.  Since a view is\nreturned, this operation is done in constant time.", "type_name": "array_like", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A view of `m` with the entries of axis reversed.  Since a view is\nreturned, this operation is done in constant time.", "type_name": "array_like", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/set_numeric_ops", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op1, op2, ..."], "description": "Each ``op = func`` pair describes an operator to be replaced.\nFor example, ``add = lambda x, y: np.add(x, y) % 5`` would replace\naddition by modulus 5 addition.", "arg_name": "op1, op2, ...", "type_name": "callable", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A list of all operators, stored before making replacements.", "type_name": "list of callables", "is_generator": false, "return_name": "saved_ops"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "op1, op2, ..."], "description": "Each ``op = func`` pair describes an operator to be replaced.\nFor example, ``add = lambda x, y: np.add(x, y) % 5`` would replace\naddition by modulus 5 addition.", "arg_name": "op1, op2, ...", "type_name": "callable", "is_optional": false, "default": null}}], [["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}], ["localhost:8000/tri", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the array.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the array.\nBy default, `M` is taken equal to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "The sub-diagonal at and below which the array is filled.\n`k` = 0 is the main diagonal, while `k` < 0 is below it,\nand `k` > 0 is above.  The default is 0.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.  The default is float.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}]]]
[["localhost:8000/can_cast", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "from_"], "description": "Data type, scalar, or array to cast from.", "arg_name": "from_", "type_name": "dtype, dtype specifier, scalar, or array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "to"], "description": "Data type to cast to.", "arg_name": "to", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "True if cast can occur according to the casting rule.", "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "from_"], "description": "Data type, scalar, or array to cast from.", "arg_name": "from_", "type_name": "dtype, dtype specifier, scalar, or array", "is_optional": false, "default": null}}], [["localhost:8000/zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/can_cast", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "from_"], "description": "Data type, scalar, or array to cast from.", "arg_name": "from_", "type_name": "dtype, dtype specifier, scalar, or array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "to"], "description": "Data type to cast to.", "arg_name": "to", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "True if cast can occur according to the casting rule.", "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "to"], "description": "Data type to cast to.", "arg_name": "to", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], [["localhost:8000/promote_types", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type1"], "description": "First data type.", "arg_name": "type1", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type2"], "description": "Second data type.", "arg_name": "type2", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/can_cast", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "from_"], "description": "Data type, scalar, or array to cast from.", "arg_name": "from_", "type_name": "dtype, dtype specifier, scalar, or array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "to"], "description": "Data type to cast to.", "arg_name": "to", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "True if cast can occur according to the casting rule.", "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur.\n\n  * 'no' means the data types should not be cast at all.\n  * 'equiv' means only byte-order changes are allowed.\n  * 'safe' means only casts which can preserve values are allowed.\n  * 'same_kind' means only safe casts or casts within a kind,\n    like float64 to float32, are allowed.\n  * 'unsafe' means any data conversions may be done.", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/promote_types", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type1"], "description": "First data type.", "arg_name": "type1", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type2"], "description": "Second data type.", "arg_name": "type2", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type1"], "description": "First data type.", "arg_name": "type1", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], [["localhost:8000/promote_types", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type1"], "description": "First data type.", "arg_name": "type1", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type2"], "description": "Second data type.", "arg_name": "type2", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}], ["localhost:8000/min_scalar_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The value whose minimal data type is to be found.", "arg_name": "a", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/promote_types", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type1"], "description": "First data type.", "arg_name": "type1", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type2"], "description": "Second data type.", "arg_name": "type2", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type2"], "description": "Second data type.", "arg_name": "type2", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], [["localhost:8000/promote_types", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type1"], "description": "First data type.", "arg_name": "type1", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "type2"], "description": "Second data type.", "arg_name": "type2", "type_name": "dtype or dtype specifier", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The promoted data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}], ["localhost:8000/min_scalar_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The value whose minimal data type is to be found.", "arg_name": "a", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/min_scalar_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The value whose minimal data type is to be found.", "arg_name": "a", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The value whose minimal data type is to be found.", "arg_name": "a", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], [["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/result_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays_and_dtypes"], "description": "The operands of some operation whose result type is needed.", "arg_name": "arrays_and_dtypes", "type_name": "list of arrays and dtypes", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays_and_dtypes"], "description": "The operands of some operation whose result type is needed.", "arg_name": "arrays_and_dtypes", "type_name": "list of arrays and dtypes", "is_optional": false, "default": null}}], [["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/isfortran", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the array is Fortran contiguous but *not* C contiguous.", "type_name": "bool", "is_generator": false, "return_name": "isfortran"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/partition", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th value of the element\nwill be in its final sorted position and all smaller elements\nwill be moved before it and all equal or greater elements behind\nit. The order of all elements in the partitions is undefined. If\nprovided with a sequence of k-th it will partition all elements\nindexed by k-th  of them into their sorted position at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. If None, the array is flattened before\nsorting. The default is -1, which sorts along the last axis.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'.", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc.  A single\nfield can be specified as a string.  Not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "partitioned_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "partitioned_array"}}], ["localhost:8000/sort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. If None, the array is flattened before\nsorting. The default is -1, which sorts along the last axis.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort or radix sort under the covers and, in general,\nthe actual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}]]]
[["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}], [["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}], ["localhost:8000/polyval", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "1D array of polynomial coefficients (including coefficients equal\nto zero) from highest degree to the constant term, or an\ninstance of poly1d.", "arg_name": "p", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "A number, an array of numbers, or an instance of poly1d, at\nwhich to evaluate `p`.", "arg_name": "x", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}]]]
[["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/empty_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "prototype"], "description": "The shape and data-type of `prototype` define these same attributes\nof the returned array.", "arg_name": "prototype", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `prototype` is Fortran\ncontiguous, 'C' otherwise. 'K' means match the layout of `prototype`\nas closely as possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `prototype`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data with the same\nshape and type as `prototype`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/zeros_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/msort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}], ["localhost:8000/sort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. If None, the array is flattened before\nsorting. The default is -1, which sorts along the last axis.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort or radix sort under the covers and, in general,\nthe actual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}]]]
[["localhost:8000/zeros_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/zeros_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}], [["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}], ["localhost:8000/polyval", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "1D array of polynomial coefficients (including coefficients equal\nto zero) from highest degree to the constant term, or an\ninstance of poly1d.", "arg_name": "p", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "A number, an array of numbers, or an instance of poly1d, at\nwhich to evaluate `p`.", "arg_name": "x", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}]]]
[["localhost:8000/zeros_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}], [["localhost:8000/nanvar", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose variance is desired.  If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the variance is computed.  The default is to compute\nthe variance of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the variance.  For arrays of integer type\nthe default is `float64`; for arrays of float types it is the same as\nthe array type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output, but the type is cast if\nnecessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ddof"], "description": "\"Delta Degrees of Freedom\": the divisor used in the calculation is\n``N - ddof``, where ``N`` represents the number of non-NaN\nelements. By default `ddof` is zero.", "arg_name": "ddof", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the variance,\notherwise return a reference to the output array. If ddof is >= the\nnumber of non-NaN elements in a slice or the slice contains only\nNaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the variance,\notherwise return a reference to the output array. If ddof is >= the\nnumber of non-NaN elements in a slice or the slice contains only\nNaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/zeros_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of zeros with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/ones_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/msort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}], ["localhost:8000/sort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. If None, the array is flattened before\nsorting. The default is -1, which sorts along the last axis.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort or radix sort under the covers and, in general,\nthe actual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}]]]
[["localhost:8000/ones_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/ones_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}], [["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}], ["localhost:8000/polyval", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "1D array of polynomial coefficients (including coefficients equal\nto zero) from highest degree to the constant term, or an\ninstance of poly1d.", "arg_name": "p", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "A number, an array of numbers, or an instance of poly1d, at\nwhich to evaluate `p`.", "arg_name": "x", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}]]]
[["localhost:8000/ones_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}], [["localhost:8000/nanvar", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose variance is desired.  If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the variance is computed.  The default is to compute\nthe variance of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the variance.  For arrays of integer type\nthe default is `float64`; for arrays of float types it is the same as\nthe array type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output, but the type is cast if\nnecessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ddof"], "description": "\"Delta Degrees of Freedom\": the divisor used in the calculation is\n``N - ddof``, where ``N`` represents the number of non-NaN\nelements. By default `ddof` is zero.", "arg_name": "ddof", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the variance,\notherwise return a reference to the output array. If ddof is >= the\nnumber of non-NaN elements in a slice or the slice contains only\nNaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the variance,\notherwise return a reference to the output array. If ddof is >= the\nnumber of non-NaN elements in a slice or the slice contains only\nNaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/ones_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.\n\n.. versionadded:: 1.6.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.\n\n.. versionadded:: 1.6.0", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/correlate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, v"], "description": "Input sequences.", "arg_name": "a, v", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Refer to the `convolve` docstring.  Note that the default\nis 'valid', unlike `convolve`, which uses 'full'.", "arg_name": "mode", "type_name": "{'valid', 'same', 'full'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "old_behavior"], "description": "`old_behavior` was removed in NumPy 1.10. If you need the old\nbehavior, use `multiarray.correlate`.", "arg_name": "old_behavior", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Discrete cross-correlation of `a` and `v`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, v"], "description": "Input sequences.", "arg_name": "a, v", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}], ["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/correlate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, v"], "description": "Input sequences.", "arg_name": "a, v", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Refer to the `convolve` docstring.  Note that the default\nis 'valid', unlike `convolve`, which uses 'full'.", "arg_name": "mode", "type_name": "{'valid', 'same', 'full'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "old_behavior"], "description": "`old_behavior` was removed in NumPy 1.10. If you need the old\nbehavior, use `multiarray.correlate`.", "arg_name": "old_behavior", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Discrete cross-correlation of `a` and `v`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Refer to the `convolve` docstring.  Note that the default\nis 'valid', unlike `convolve`, which uses 'full'.", "arg_name": "mode", "type_name": "{'valid', 'same', 'full'}", "is_optional": true, "default": "is"}}], [["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}], ["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/correlate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, v"], "description": "Input sequences.", "arg_name": "a, v", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Refer to the `convolve` docstring.  Note that the default\nis 'valid', unlike `convolve`, which uses 'full'.", "arg_name": "mode", "type_name": "{'valid', 'same', 'full'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "old_behavior"], "description": "`old_behavior` was removed in NumPy 1.10. If you need the old\nbehavior, use `multiarray.correlate`.", "arg_name": "old_behavior", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Discrete cross-correlation of `a` and `v`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "old_behavior"], "description": "`old_behavior` was removed in NumPy 1.10. If you need the old\nbehavior, use `multiarray.correlate`.", "arg_name": "old_behavior", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/find_common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array_types"], "description": "A list of dtypes or dtype convertible objects representing arrays.", "arg_name": "array_types", "type_name": "sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "scalar_types"], "description": "A list of dtypes or dtype convertible objects representing scalars.", "arg_name": "scalar_types", "type_name": "sequence", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The common data type, which is the maximum of `array_types` ignoring\n`scalar_types`, unless the maximum of `scalar_types` is of a\ndifferent kind (`dtype.kind`). If the kind is not understood, then\nNone is returned.", "type_name": "dtype", "is_generator": false, "return_name": "datatype"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The common data type, which is the maximum of `array_types` ignoring\n`scalar_types`, unless the maximum of `scalar_types` is of a\ndifferent kind (`dtype.kind`). If the kind is not understood, then\nNone is returned.", "type_name": "dtype", "is_generator": false, "return_name": "datatype"}}], ["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/convolve", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First one-dimensional input array.", "arg_name": "a", "type_name": "(N,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "v"], "description": "Second one-dimensional input array.", "arg_name": "v", "type_name": "(M,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "'full':\n  By default, mode is 'full'.  This returns the convolution\n  at each point of overlap, with an output shape of (N+M-1,). At\n  the end-points of the convolution, the signals do not overlap\n  completely, and boundary effects may be seen.\n\n'same':\n  Mode 'same' returns output of length ``max(M, N)``.  Boundary\n  effects are still visible.\n\n'valid':\n  Mode 'valid' returns output of length\n  ``max(M, N) - min(M, N) + 1``.  The convolution product is only given\n  for points where the signals overlap completely.  Values outside\n  the signal boundary have no effect.", "arg_name": "mode", "type_name": "{'full', 'valid', 'same'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Discrete, linear convolution of `a` and `v`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First one-dimensional input array.", "arg_name": "a", "type_name": "(N,) array_like", "is_optional": false, "default": null}}], [["localhost:8000/stack", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays"], "description": "Each array must have the same shape.", "arg_name": "arrays", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis in the result array along which the input arrays are stacked.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what stack would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The stacked array has one more dimension than the input arrays.", "type_name": "ndarray", "is_generator": false, "return_name": "stacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The stacked array has one more dimension than the input arrays.", "type_name": "ndarray", "is_generator": false, "return_name": "stacked"}}], ["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/convolve", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First one-dimensional input array.", "arg_name": "a", "type_name": "(N,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "v"], "description": "Second one-dimensional input array.", "arg_name": "v", "type_name": "(M,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "'full':\n  By default, mode is 'full'.  This returns the convolution\n  at each point of overlap, with an output shape of (N+M-1,). At\n  the end-points of the convolution, the signals do not overlap\n  completely, and boundary effects may be seen.\n\n'same':\n  Mode 'same' returns output of length ``max(M, N)``.  Boundary\n  effects are still visible.\n\n'valid':\n  Mode 'valid' returns output of length\n  ``max(M, N) - min(M, N) + 1``.  The convolution product is only given\n  for points where the signals overlap completely.  Values outside\n  the signal boundary have no effect.", "arg_name": "mode", "type_name": "{'full', 'valid', 'same'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Discrete, linear convolution of `a` and `v`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "v"], "description": "Second one-dimensional input array.", "arg_name": "v", "type_name": "(M,) array_like", "is_optional": false, "default": null}}], [["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}], ["localhost:8000/stack", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays"], "description": "Each array must have the same shape.", "arg_name": "arrays", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis in the result array along which the input arrays are stacked.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what stack would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The stacked array has one more dimension than the input arrays.", "type_name": "ndarray", "is_generator": false, "return_name": "stacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The stacked array has one more dimension than the input arrays.", "type_name": "ndarray", "is_generator": false, "return_name": "stacked"}}]]]
[["localhost:8000/convolve", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First one-dimensional input array.", "arg_name": "a", "type_name": "(N,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "v"], "description": "Second one-dimensional input array.", "arg_name": "v", "type_name": "(M,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "'full':\n  By default, mode is 'full'.  This returns the convolution\n  at each point of overlap, with an output shape of (N+M-1,). At\n  the end-points of the convolution, the signals do not overlap\n  completely, and boundary effects may be seen.\n\n'same':\n  Mode 'same' returns output of length ``max(M, N)``.  Boundary\n  effects are still visible.\n\n'valid':\n  Mode 'valid' returns output of length\n  ``max(M, N) - min(M, N) + 1``.  The convolution product is only given\n  for points where the signals overlap completely.  Values outside\n  the signal boundary have no effect.", "arg_name": "mode", "type_name": "{'full', 'valid', 'same'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Discrete, linear convolution of `a` and `v`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "'full':\n  By default, mode is 'full'.  This returns the convolution\n  at each point of overlap, with an output shape of (N+M-1,). At\n  the end-points of the convolution, the signals do not overlap\n  completely, and boundary effects may be seen.\n\n'same':\n  Mode 'same' returns output of length ``max(M, N)``.  Boundary\n  effects are still visible.\n\n'valid':\n  Mode 'valid' returns output of length\n  ``max(M, N) - min(M, N) + 1``.  The convolution product is only given\n  for points where the signals overlap completely.  Values outside\n  the signal boundary have no effect.", "arg_name": "mode", "type_name": "{'full', 'valid', 'same'}", "is_optional": true, "default": null}}], [["localhost:8000/nanquantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n* linear: ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* lower: ``i``.\n* higher: ``j``.\n* nearest: ``i`` or ``j``, whichever is nearest.\n* midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/inner", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "If `a` and `b` are nonscalar, their last dimensions must match.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`out.shape = a.shape[:-1] + b.shape[:-1]`", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "If `a` and `b` are nonscalar, their last dimensions must match.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}], ["localhost:8000/vdot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "If `a` is complex the complex conjugate is taken before calculation\nof the dot product.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument to the dot product.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dot product of `a` and `b`.  Can be an int, float, or\ncomplex depending on the types of `a` and `b`.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dot product of `a` and `b`.  Can be an int, float, or\ncomplex depending on the types of `a` and `b`.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}]]]
[["localhost:8000/dot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First argument.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output argument. This must have the exact kind that would be returned\nif it was not used. In particular, it must have the right type, must be\nC-contiguous, and its dtype must be the dtype that would be returned\nfor `dot(a,b)`. This is a performance feature. Therefore, if these\nconditions are not met, an exception is raised, instead of attempting\nto be flexible.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns the dot product of `a` and `b`.  If `a` and `b` are both\nscalars or both 1-D arrays then a scalar is returned; otherwise\nan array is returned.\nIf `out` is given, then it is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First argument.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/asarray_chkfinite", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data, in any form that can be converted to an array.  This\nincludes lists, lists of tuples, tuples, tuples of tuples, tuples\nof lists and ndarrays.  Success requires no NaNs or Infs.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Memory layout.  'A' and 'K' depend on the order of input array a.\n'C' row-major (C-style),\n'F' column-major (Fortran-style) memory representation.\n'A' (any) means 'F' if `a` is Fortran contiguous, 'C' otherwise\n'K' (keep) preserve input order\nDefaults to 'C'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray.  If `a` is a subclass of ndarray, a base\nclass ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray.  If `a` is a subclass of ndarray, a base\nclass ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/dot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First argument.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output argument. This must have the exact kind that would be returned\nif it was not used. In particular, it must have the right type, must be\nC-contiguous, and its dtype must be the dtype that would be returned\nfor `dot(a,b)`. This is a performance feature. Therefore, if these\nconditions are not met, an exception is raised, instead of attempting\nto be flexible.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns the dot product of `a` and `b`.  If `a` and `b` are both\nscalars or both 1-D arrays then a scalar is returned; otherwise\nan array is returned.\nIf `out` is given, then it is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/dot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First argument.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output argument. This must have the exact kind that would be returned\nif it was not used. In particular, it must have the right type, must be\nC-contiguous, and its dtype must be the dtype that would be returned\nfor `dot(a,b)`. This is a performance feature. Therefore, if these\nconditions are not met, an exception is raised, instead of attempting\nto be flexible.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns the dot product of `a` and `b`.  If `a` and `b` are both\nscalars or both 1-D arrays then a scalar is returned; otherwise\nan array is returned.\nIf `out` is given, then it is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output argument. This must have the exact kind that would be returned\nif it was not used. In particular, it must have the right type, must be\nC-contiguous, and its dtype must be the dtype that would be returned\nfor `dot(a,b)`. This is a performance feature. Therefore, if these\nconditions are not met, an exception is raised, instead of attempting\nto be flexible.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/outer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "a", "type_name": "(M,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "b", "type_name": "(N,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location where the result is stored\n\n.. versionadded:: 1.9.0", "arg_name": "out", "type_name": "(M, N) ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "``out[i, j] = a[i] * b[j]``", "type_name": "(M, N) ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "a", "type_name": "(M,) array_like", "is_optional": false, "default": null}}], [["localhost:8000/polyadd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}], ["localhost:8000/matmul", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays, scalars not allowed.", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\nprovided or None, a freshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.16\n   Now handles ufunc kwargs", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}]]]
[["localhost:8000/outer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "a", "type_name": "(M,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "b", "type_name": "(N,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location where the result is stored\n\n.. versionadded:: 1.9.0", "arg_name": "out", "type_name": "(M, N) ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "``out[i, j] = a[i] * b[j]``", "type_name": "(M, N) ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "b", "type_name": "(N,) array_like", "is_optional": false, "default": null}}], [["localhost:8000/polyadd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}], ["localhost:8000/matmul", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays, scalars not allowed.", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\nprovided or None, a freshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.16\n   Now handles ufunc kwargs", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}]]]
[["localhost:8000/outer", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "First input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "a", "type_name": "(M,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second input vector.  Input is flattened if\nnot already 1-dimensional.", "arg_name": "b", "type_name": "(N,) array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location where the result is stored\n\n.. versionadded:: 1.9.0", "arg_name": "out", "type_name": "(M, N) ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "``out[i, j] = a[i] * b[j]``", "type_name": "(M, N) ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location where the result is stored\n\n.. versionadded:: 1.9.0", "arg_name": "out", "type_name": "(M, N) ndarray", "is_optional": true, "default": null}}], [["localhost:8000/rollaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis to be rolled. The positions of the other axes do not\nchange relative to one another.", "arg_name": "axis", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "When ``start <= axis``, the axis is rolled back until it lies in\nthis position. When ``start > axis``, the axis is rolled until it\nlies before this position. The default, 0, results in a \"complete\"\nroll. The following table describes how negative values of ``start``\nare interpreted:\n\n.. table::\n   :align: left\n\n   +-------------------+----------------------+\n   |     ``start``     | Normalized ``start`` |\n   +===================+======================+\n   | ``-(arr.ndim+1)`` | raise ``AxisError``  |\n   +-------------------+----------------------+\n   | ``-arr.ndim``     | 0                    |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``-1``            | ``arr.ndim-1``       |\n   +-------------------+----------------------+\n   | ``0``             | ``0``                |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``arr.ndim``      | ``arr.ndim``         |\n   +-------------------+----------------------+\n   | ``arr.ndim + 1``  | raise ``AxisError``  |\n   +-------------------+----------------------+\n   \n.. |vdots|   unicode:: U+22EE .. Vertical Ellipsis", "arg_name": "start", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0 a view of `a` is always returned. For earlier\nNumPy versions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0 a view of `a` is always returned. For earlier\nNumPy versions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}], ["localhost:8000/swapaxes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "First axis.", "arg_name": "axis1", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Second axis.", "arg_name": "axis2", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0, if `a` is an ndarray, then a view of `a` is\nreturned; otherwise a new array is created. For earlier NumPy\nversions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "a_swapped"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0, if `a` is an ndarray, then a view of `a` is\nreturned; otherwise a new array is created. For earlier NumPy\nversions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "a_swapped"}}]]]
[["localhost:8000/vdot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "If `a` is complex the complex conjugate is taken before calculation\nof the dot product.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument to the dot product.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dot product of `a` and `b`.  Can be an int, float, or\ncomplex depending on the types of `a` and `b`.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "If `a` is complex the complex conjugate is taken before calculation\nof the dot product.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}], ["localhost:8000/iscomplexobj", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input can be of any type and shape.", "arg_name": "x", "type_name": "any", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The return value, True if `x` is of a complex type or has at least\none complex element.", "type_name": "bool", "is_generator": false, "return_name": "iscomplexobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The return value, True if `x` is of a complex type or has at least\none complex element.", "type_name": "bool", "is_generator": false, "return_name": "iscomplexobj"}}]]]
[["localhost:8000/vdot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "If `a` is complex the complex conjugate is taken before calculation\nof the dot product.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument to the dot product.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dot product of `a` and `b`.  Can be an int, float, or\ncomplex depending on the types of `a` and `b`.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Second argument to the dot product.", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/roll", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shift"], "description": "The number of places by which elements are shifted.  If a tuple,\nthen `axis` must be a tuple of the same size, and each of the\ngiven axes is shifted by the corresponding number.  If an int\nwhile `axis` is a tuple of ints, then the same value is used for\nall given axes.", "arg_name": "shift", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which elements are shifted.  By default, the\narray is flattened before shifting, after which the original\nshape is restored.", "arg_name": "axis", "type_name": "int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, with the same shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/roll", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shift"], "description": "The number of places by which elements are shifted.  If a tuple,\nthen `axis` must be a tuple of the same size, and each of the\ngiven axes is shifted by the corresponding number.  If an int\nwhile `axis` is a tuple of ints, then the same value is used for\nall given axes.", "arg_name": "shift", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which elements are shifted.  By default, the\narray is flattened before shifting, after which the original\nshape is restored.", "arg_name": "axis", "type_name": "int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, with the same shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shift"], "description": "The number of places by which elements are shifted.  If a tuple,\nthen `axis` must be a tuple of the same size, and each of the\ngiven axes is shifted by the corresponding number.  If an int\nwhile `axis` is a tuple of ints, then the same value is used for\nall given axes.", "arg_name": "shift", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/roll", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shift"], "description": "The number of places by which elements are shifted.  If a tuple,\nthen `axis` must be a tuple of the same size, and each of the\ngiven axes is shifted by the corresponding number.  If an int\nwhile `axis` is a tuple of ints, then the same value is used for\nall given axes.", "arg_name": "shift", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which elements are shifted.  By default, the\narray is flattened before shifting, after which the original\nshape is restored.", "arg_name": "axis", "type_name": "int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, with the same shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which elements are shifted.  By default, the\narray is flattened before shifting, after which the original\nshape is restored.", "arg_name": "axis", "type_name": "int or tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_to", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array"], "description": "The array to broadcast.", "arg_name": "array", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The shape of the desired array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}], ["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}]]]
[["localhost:8000/rollaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis to be rolled. The positions of the other axes do not\nchange relative to one another.", "arg_name": "axis", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "When ``start <= axis``, the axis is rolled back until it lies in\nthis position. When ``start > axis``, the axis is rolled until it\nlies before this position. The default, 0, results in a \"complete\"\nroll. The following table describes how negative values of ``start``\nare interpreted:\n\n.. table::\n   :align: left\n\n   +-------------------+----------------------+\n   |     ``start``     | Normalized ``start`` |\n   +===================+======================+\n   | ``-(arr.ndim+1)`` | raise ``AxisError``  |\n   +-------------------+----------------------+\n   | ``-arr.ndim``     | 0                    |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``-1``            | ``arr.ndim-1``       |\n   +-------------------+----------------------+\n   | ``0``             | ``0``                |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``arr.ndim``      | ``arr.ndim``         |\n   +-------------------+----------------------+\n   | ``arr.ndim + 1``  | raise ``AxisError``  |\n   +-------------------+----------------------+\n   \n.. |vdots|   unicode:: U+22EE .. Vertical Ellipsis", "arg_name": "start", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0 a view of `a` is always returned. For earlier\nNumPy versions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/rollaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis to be rolled. The positions of the other axes do not\nchange relative to one another.", "arg_name": "axis", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "When ``start <= axis``, the axis is rolled back until it lies in\nthis position. When ``start > axis``, the axis is rolled until it\nlies before this position. The default, 0, results in a \"complete\"\nroll. The following table describes how negative values of ``start``\nare interpreted:\n\n.. table::\n   :align: left\n\n   +-------------------+----------------------+\n   |     ``start``     | Normalized ``start`` |\n   +===================+======================+\n   | ``-(arr.ndim+1)`` | raise ``AxisError``  |\n   +-------------------+----------------------+\n   | ``-arr.ndim``     | 0                    |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``-1``            | ``arr.ndim-1``       |\n   +-------------------+----------------------+\n   | ``0``             | ``0``                |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``arr.ndim``      | ``arr.ndim``         |\n   +-------------------+----------------------+\n   | ``arr.ndim + 1``  | raise ``AxisError``  |\n   +-------------------+----------------------+\n   \n.. |vdots|   unicode:: U+22EE .. Vertical Ellipsis", "arg_name": "start", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0 a view of `a` is always returned. For earlier\nNumPy versions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis to be rolled. The positions of the other axes do not\nchange relative to one another.", "arg_name": "axis", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/bartlett", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/gradient", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "f"], "description": "An N-dimensional array containing samples of a scalar function.", "arg_name": "f", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "varargs"], "description": "Spacing between f values. Default unitary spacing for all dimensions.\nSpacing can be specified using:\n\n1. single scalar to specify a sample distance for all dimensions.\n2. N scalars to specify a constant sample distance for each dimension.\n   i.e. `dx`, `dy`, `dz`, ...\n3. N arrays to specify the coordinates of the values along each\n   dimension of F. The length of the array must match the size of\n   the corresponding dimension\n4. Any combination of N scalars/arrays with the meaning of 2. and 3.\n\nIf `axis` is given, the number of varargs must equal the number of axes.\nDefault: 1.", "arg_name": "varargs", "type_name": "list of scalar or array", "is_optional": true, "default": "unitary"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "edge_order"], "description": "Gradient is calculated using N-th order accurate differences\nat the boundaries. Default: 1.\n\n.. versionadded:: 1.9.1", "arg_name": "edge_order", "type_name": "{1, 2}", "is_optional": true, "default": "1."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Gradient is calculated only along the given axis or axes\nThe default (axis = None) is to calculate the gradient for all the axes\nof the input array. axis may be negative, in which case it counts from\nthe last to the first axis.\n\n.. versionadded:: 1.11.0", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.", "type_name": "ndarray or list of ndarray", "is_generator": false, "return_name": "gradient"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.", "type_name": "ndarray or list of ndarray", "is_generator": false, "return_name": "gradient"}}]]]
[["localhost:8000/rollaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis to be rolled. The positions of the other axes do not\nchange relative to one another.", "arg_name": "axis", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "When ``start <= axis``, the axis is rolled back until it lies in\nthis position. When ``start > axis``, the axis is rolled until it\nlies before this position. The default, 0, results in a \"complete\"\nroll. The following table describes how negative values of ``start``\nare interpreted:\n\n.. table::\n   :align: left\n\n   +-------------------+----------------------+\n   |     ``start``     | Normalized ``start`` |\n   +===================+======================+\n   | ``-(arr.ndim+1)`` | raise ``AxisError``  |\n   +-------------------+----------------------+\n   | ``-arr.ndim``     | 0                    |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``-1``            | ``arr.ndim-1``       |\n   +-------------------+----------------------+\n   | ``0``             | ``0``                |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``arr.ndim``      | ``arr.ndim``         |\n   +-------------------+----------------------+\n   | ``arr.ndim + 1``  | raise ``AxisError``  |\n   +-------------------+----------------------+\n   \n.. |vdots|   unicode:: U+22EE .. Vertical Ellipsis", "arg_name": "start", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For NumPy >= 1.10.0 a view of `a` is always returned. For earlier\nNumPy versions a view of `a` is returned only if the order of the\naxes is changed, otherwise the input array is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "start"], "description": "When ``start <= axis``, the axis is rolled back until it lies in\nthis position. When ``start > axis``, the axis is rolled until it\nlies before this position. The default, 0, results in a \"complete\"\nroll. The following table describes how negative values of ``start``\nare interpreted:\n\n.. table::\n   :align: left\n\n   +-------------------+----------------------+\n   |     ``start``     | Normalized ``start`` |\n   +===================+======================+\n   | ``-(arr.ndim+1)`` | raise ``AxisError``  |\n   +-------------------+----------------------+\n   | ``-arr.ndim``     | 0                    |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``-1``            | ``arr.ndim-1``       |\n   +-------------------+----------------------+\n   | ``0``             | ``0``                |\n   +-------------------+----------------------+\n   | |vdots|           | |vdots|              |\n   +-------------------+----------------------+\n   | ``arr.ndim``      | ``arr.ndim``         |\n   +-------------------+----------------------+\n   | ``arr.ndim + 1``  | raise ``AxisError``  |\n   +-------------------+----------------------+\n   \n.. |vdots|   unicode:: U+22EE .. Vertical Ellipsis", "arg_name": "start", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/inner", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "If `a` and `b` are nonscalar, their last dimensions must match.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`out.shape = a.shape[:-1] + b.shape[:-1]`", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`out.shape = a.shape[:-1] + b.shape[:-1]`", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/tri", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the array.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the array.\nBy default, `M` is taken equal to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "The sub-diagonal at and below which the array is filled.\n`k` = 0 is the main diagonal, while `k` < 0 is below it,\nand `k` > 0 is above.  The default is 0.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.  The default is float.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}]]]
[["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}], [["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}], ["localhost:8000/eye", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the output.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the output. If None, defaults to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Index of the diagonal: 0 (the default) refers to the main diagonal,\na positive value refers to an upper diagonal, and a negative value\nto a lower diagonal.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether the output should be stored in row-major (C-style) or\ncolumn-major (Fortran-style) order in memory.\n\n.. versionadded:: 1.14.0", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array where all elements are equal to zero, except for the `k`-th\ndiagonal, whose values are equal to one.", "type_name": "ndarray of shape (N,M)", "is_generator": false, "return_name": "I"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array where all elements are equal to zero, except for the `k`-th\ndiagonal, whose values are equal to one.", "type_name": "ndarray of shape (N,M)", "is_generator": false, "return_name": "I"}}]]]
[["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_to", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array"], "description": "The array to broadcast.", "arg_name": "array", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The shape of the desired array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/cross", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vector cross product(s).", "type_name": "ndarray", "is_generator": false, "return_name": "c"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/kaiser", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "beta"], "description": "Shape parameter for window.", "arg_name": "beta", "type_name": "float", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/blackman", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an empty\narray is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/cross", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vector cross product(s).", "type_name": "ndarray", "is_generator": false, "return_name": "c"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/blackman", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an empty\narray is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/cross", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vector cross product(s).", "type_name": "ndarray", "is_generator": false, "return_name": "c"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/nanmax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose maximum is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the maximum is computed. The default is to compute\nthe maximum of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary. See\n:ref:`ufuncs-output-type` for more details.\n\n.. versionadded:: 1.8.0", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf the value is anything but the default, then\n`keepdims` will be passed through to the `max` method\nof sub-classes of `ndarray`.  If the sub-classes methods\ndoes not implement `keepdims` any exceptions will be raised.\n\n.. versionadded:: 1.8.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the same shape as `a`, with the specified axis removed.\nIf `a` is a 0-d array, or if axis is None, an ndarray scalar is\nreturned.  The same dtype as `a` is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "nanmax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the same shape as `a`, with the specified axis removed.\nIf `a` is a 0-d array, or if axis is None, an ndarray scalar is\nreturned.  The same dtype as `a` is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "nanmax"}}], ["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}]]]
[["localhost:8000/cross", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vector cross product(s).", "type_name": "ndarray", "is_generator": false, "return_name": "c"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/quantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n    * linear: ``i + (j - i) * fraction``, where ``fraction``\n      is the fractional part of the index surrounded by ``i``\n      and ``j``.\n    * lower: ``i``.\n    * higher: ``j``.\n    * nearest: ``i`` or ``j``, whichever is nearest.\n    * midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single quantile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single quantile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}], ["localhost:8000/nanquantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n* linear: ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* lower: ``i``.\n* higher: ``j``.\n* nearest: ``i`` or ``j``, whichever is nearest.\n* midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}]]]
[["localhost:8000/cross", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vector cross product(s).", "type_name": "ndarray", "is_generator": false, "return_name": "c"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/quantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n    * linear: ``i + (j - i) * fraction``, where ``fraction``\n      is the fractional part of the index surrounded by ``i``\n      and ``j``.\n    * lower: ``i``.\n    * higher: ``j``.\n    * nearest: ``i`` or ``j``, whichever is nearest.\n    * midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single quantile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single quantile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}], ["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}]]]
[["localhost:8000/cross", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Components of the first vector(s).", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "b"], "description": "Components of the second vector(s).", "arg_name": "b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisa"], "description": "Axis of `a` that defines the vector(s).  By default, the last axis.", "arg_name": "axisa", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisb"], "description": "Axis of `b` that defines the vector(s).  By default, the last axis.", "arg_name": "axisb", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axisc"], "description": "Axis of `c` containing the cross product vector(s).  Ignored if\nboth input vectors have dimension 2, as the return is scalar.\nBy default, the last axis.", "arg_name": "axisc", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vector cross product(s).", "type_name": "ndarray", "is_generator": false, "return_name": "c"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "If defined, the axis of `a`, `b` and `c` that defines the vector(s)\nand cross product(s).  Overrides `axisa`, `axisb` and `axisc`.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/argsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}], ["localhost:8000/vander", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "1-D input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of columns in the output.  If `N` is not specified, a square\narray is returned (``N = len(x)``).", "arg_name": "N", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "increasing"], "description": "Order of the powers of the columns.  If True, the powers increase\nfrom left to right, if False (the default) they are reversed.\n\n.. versionadded:: 1.9.0", "arg_name": "increasing", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vandermonde matrix.  If `increasing` is False, the first column is\n``x^(N-1)``, the second ``x^(N-2)`` and so forth. If `increasing` is\nTrue, the columns are ``x^0, x^1, ..., x^(N-1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Vandermonde matrix.  If `increasing` is False, the first column is\n``x^(N-1)``, the second ``x^(N-2)`` and so forth. If `increasing` is\nTrue, the columns are ``x^0, x^1, ..., x^(N-1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/tensordot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Tensors to \"dot\".", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "* integer_like\n  If an int N, sum over the last N axes of `a` and the first N axes\n  of `b` in order. The sizes of the corresponding axes must match.\n* (2,) array_like\n  Or, a list of axes to be summed over, first sequence applying to `a`,\n  second to `b`. Both elements array_like must be of the same length.", "arg_name": "axes", "type_name": "int or (2,) array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The tensor dot product of the input.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Tensors to \"dot\".", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/geterr", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A dictionary with keys \"divide\", \"over\", \"under\", and \"invalid\",\nwhose values are from the strings \"ignore\", \"print\", \"log\", \"warn\",\n\"raise\", and \"call\". The keys represent possible floating-point\nexceptions, and the values define how these exceptions are handled.", "type_name": "dict", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A dictionary with keys \"divide\", \"over\", \"under\", and \"invalid\",\nwhose values are from the strings \"ignore\", \"print\", \"log\", \"warn\",\n\"raise\", and \"call\". The keys represent possible floating-point\nexceptions, and the values define how these exceptions are handled.", "type_name": "dict", "is_generator": false, "return_name": "res"}}]]]
[["localhost:8000/tensordot", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Tensors to \"dot\".", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "* integer_like\n  If an int N, sum over the last N axes of `a` and the first N axes\n  of `b` in order. The sizes of the corresponding axes must match.\n* (2,) array_like\n  Or, a list of axes to be summed over, first sequence applying to `a`,\n  second to `b`. Both elements array_like must be of the same length.", "arg_name": "axes", "type_name": "int or (2,) array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The tensor dot product of the input.", "type_name": "ndarray", "is_generator": false, "return_name": "output"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "* integer_like\n  If an int N, sum over the last N axes of `a` and the first N axes\n  of `b` in order. The sizes of the corresponding axes must match.\n* (2,) array_like\n  Or, a list of axes to be summed over, first sequence applying to `a`,\n  second to `b`. Both elements array_like must be of the same length.", "arg_name": "axes", "type_name": "int or (2,) array_like", "is_optional": false, "default": null}}], [["localhost:8000/nanpercentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/nanquantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n* linear: ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* lower: ``i``.\n* higher: ``j``.\n* nearest: ``i`` or ``j``, whichever is nearest.\n* midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}]]]
[["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}], [["localhost:8000/array", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "object"], "description": "An array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.", "arg_name": "object", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array.  If not given, then the type will\nbe determined as the minimum type required to hold the objects in the\nsequence.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If true (default), then the object is copied.  Otherwise, a copy will\nonly be made if __array__ returns a copy, if obj is a nested sequence,\nor if a copy is needed to satisfy any of the other requirements\n(`dtype`, `order`, etc.).", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Specify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless 'F' is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.\n\n===== ========= ===================================================\norder  no copy                     copy=True\n===== ========= ===================================================\n'K'   unchanged F & C order preserved, otherwise most similar order\n'A'   unchanged F order if input is F and not C, otherwise C order\n'C'   C order   C order\n'F'   F order   F order\n===== ========= ===================================================\n\nWhen ``copy=False`` and a copy is made for other reasons, the result is\nthe same as if ``copy=True``, with some exceptions for `A`, see the\nNotes section. The default order is 'K'.", "arg_name": "order", "type_name": "{'K', 'A', 'C', 'F'}", "is_optional": true, "default": "order"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ndmin"], "description": "Specifies the minimum number of dimensions that the resulting\narray should have.  Ones will be pre-pended to the shape as\nneeded to meet this requirement.", "arg_name": "ndmin", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array object satisfying the specified requirements.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}], [["localhost:8000/recarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of output array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type.  By default, the data-type is determined\nfrom `formats`, `names`, `titles`, `aligned` and `byteorder`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formats"], "description": "A list containing the data-types for the different columns, e.g.\n``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\nconvention of using types directly, i.e. ``(int, float, int)``.\nNote that `formats` must be a list, not a tuple.\nGiven that `formats` is somewhat limited, we recommend specifying\n`dtype` instead.", "arg_name": "formats", "type_name": "list of data-types", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "The name of each column, e.g. ``('x', 'y', 'z')``.", "arg_name": "names", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buf"], "description": "By default, a new array is created of the given shape and data-type.\nIf `buf` is specified and is an object exposing the buffer interface,\nthe array will use the memory from the existing buffer.  In this case,\nthe `offset` and `strides` keywords are available.", "arg_name": "buf", "type_name": "buffer", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "titles"], "description": "Aliases for column names.  For example, if `names` were\n``('x', 'y', 'z')`` and `titles` is\n``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.", "arg_name": "titles", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "byteorder"], "description": "Byte-order for all fields.", "arg_name": "byteorder", "type_name": "{'<', '>', '='}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "aligned"], "description": "Align the fields in memory as the C-compiler would.", "arg_name": "aligned", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "strides"], "description": "Buffer (`buf`) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "offset"], "description": "Start reading buffer (`buf`) from this offset onwards.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/array_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal. If the dtype of a1 and a2 is\ncomplex, values will be considered equal if either the real or the\nimaginary component of a given value is ``nan``.\n\n.. versionadded:: 1.19.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the arrays are equal.", "type_name": "bool", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/array_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal. If the dtype of a1 and a2 is\ncomplex, values will be considered equal if either the real or the\nimaginary component of a given value is ``nan``.\n\n.. versionadded:: 1.19.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the arrays are equal.", "type_name": "bool", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal. If the dtype of a1 and a2 is\ncomplex, values will be considered equal if either the real or the\nimaginary component of a given value is ``nan``.\n\n.. versionadded:: 1.19.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/nanpercentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/array_equiv", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "True if equivalent, False otherwise.", "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dimensions"], "description": "The shape of the grid.", "arg_name": "dimensions", "type_name": "sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the result.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "Return a sparse representation of the grid instead of a dense\nrepresentation. Default is False.\n\n.. versionadded:: 1.17", "arg_name": "sparse", "type_name": "boolean", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dimensions"], "description": "The shape of the grid.", "arg_name": "dimensions", "type_name": "sequence of ints", "is_optional": false, "default": null}}], [["localhost:8000/block", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays"], "description": "If passed a single ndarray or scalar (a nested list of depth 0), this\nis returned unmodified (and not copied).\n\nElements shapes must match along the appropriate axes (without\nbroadcasting), but leading 1s will be prepended to the shape as\nnecessary to make the dimensions match.", "arg_name": "arrays", "type_name": "nested list of array_like or scalars (but not tuples)", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The array assembled from the given blocks.\n\nThe dimensionality of the output is equal to the greatest of:\n* the dimensionality of all the inputs\n* the depth to which the input list is nested", "type_name": "ndarray", "is_generator": false, "return_name": "block_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The array assembled from the given blocks.\n\nThe dimensionality of the output is equal to the greatest of:\n* the dimensionality of all the inputs\n* the depth to which the input list is nested", "type_name": "ndarray", "is_generator": false, "return_name": "block_array"}}], ["localhost:8000/shape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements of the shape tuple give the lengths of the\ncorresponding array dimensions.", "type_name": "tuple of ints", "is_generator": false, "return_name": "shape"}}]]]
[["localhost:8000/indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dimensions"], "description": "The shape of the grid.", "arg_name": "dimensions", "type_name": "sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the result.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "Return a sparse representation of the grid instead of a dense\nrepresentation. Default is False.\n\n.. versionadded:: 1.17", "arg_name": "sparse", "type_name": "boolean", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the result.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}], [["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}], ["localhost:8000/min_scalar_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The value whose minimal data type is to be found.", "arg_name": "a", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dimensions"], "description": "The shape of the grid.", "arg_name": "dimensions", "type_name": "sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the result.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "Return a sparse representation of the grid instead of a dense\nrepresentation. Default is False.\n\n.. versionadded:: 1.17", "arg_name": "sparse", "type_name": "boolean", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "Return a sparse representation of the grid instead of a dense\nrepresentation. Default is False.\n\n.. versionadded:: 1.17", "arg_name": "sparse", "type_name": "boolean", "is_optional": true, "default": "False."}}], [["localhost:8000/einsum_path", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subscripts"], "description": "Specifies the subscripts for summation.", "arg_name": "subscripts", "type_name": "str", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*operands"], "description": "These are the arrays for the operation.", "arg_name": "*operands", "type_name": "list of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "optimize"], "description": "Choose the type of path. If a tuple is provided, the second argument is\nassumed to be the maximum intermediate size created. If only a single\nargument is provided the largest input or output array size is used\nas a maximum intermediate size.\n\n* if a list is given that starts with ``einsum_path``, uses this as the\n  contraction path\n* if False no optimization is taken\n* if True defaults to the 'greedy' algorithm\n* 'optimal' An algorithm that combinatorially explores all possible\n  ways of contracting the listed tensors and choosest the least costly\n  path. Scales exponentially with the number of terms in the\n  contraction.\n* 'greedy' An algorithm that chooses the best pair contraction\n  at each step. Effectively, this algorithm searches the largest inner,\n  Hadamard, and then outer products at each step. Scales cubically with\n  the number of terms in the contraction. Equivalent to the 'optimal'\n  path for most contractions.\n\nDefault is 'greedy'.", "arg_name": "optimize", "type_name": "{bool, list, tuple, 'greedy', 'optimal'}", "is_optional": false, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A list representation of the einsum path.", "type_name": "list of tuples", "is_generator": false, "return_name": "path"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A list representation of the einsum path.", "type_name": "list of tuples", "is_generator": false, "return_name": "path"}}], ["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}]]]
[["localhost:8000/fromfunction", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}], [["localhost:8000/indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dimensions"], "description": "The shape of the grid.", "arg_name": "dimensions", "type_name": "sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the result.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "Return a sparse representation of the grid instead of a dense\nrepresentation. Default is False.\n\n.. versionadded:: 1.17", "arg_name": "sparse", "type_name": "boolean", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If sparse is False:\n    Returns one array of grid indices,\n    ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\nIf sparse is True:\n    Returns a tuple of arrays, with\n    ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with\n    dimensions[i] in the ith place", "type_name": "one ndarray or tuple of ndarrays", "is_generator": false, "return_name": "grid"}}], ["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}]]]
[["localhost:8000/fromfunction", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}], [["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}], ["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}]]]
[["localhost:8000/fromfunction", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/fromfunction", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "function"], "description": "The function is called with N parameters, where N is the rank of\n`shape`.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, if `shape`\nwere ``(2, 2)``, then the parameters would be\n``array([[0, 0], [1, 1]])`` and ``array([[0, 1], [0, 1]])``", "arg_name": "function", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the output array, which also determines the shape of\nthe coordinate arrays passed to `function`.", "arg_name": "shape", "type_name": "(N,) tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the coordinate arrays passed to `function`.\nBy default, `dtype` is float.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of the call to `function` is passed back directly.\nTherefore the shape of `fromfunction` is completely determined by\n`function`.  If `function` returns a scalar value, the shape of\n`fromfunction` would not match the `shape` parameter.", "type_name": "any", "is_generator": false, "return_name": "fromfunction"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/isclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns a boolean array of where `a` and `b` are equal within the\ngiven tolerance. If both `a` and `b` are scalars, returns a single\nboolean value.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}], ["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/isclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns a boolean array of where `a` and `b` are equal within the\ngiven tolerance. If both `a` and `b` are scalars, returns a single\nboolean value.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}], [["localhost:8000/kaiser", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "beta"], "description": "Shape parameter for window.", "arg_name": "beta", "type_name": "float", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/isclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns a boolean array of where `a` and `b` are equal within the\ngiven tolerance. If both `a` and `b` are scalars, returns a single\nboolean value.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}], [["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/kaiser", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "beta"], "description": "Shape parameter for window.", "arg_name": "beta", "type_name": "float", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/isclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns a boolean array of where `a` and `b` are equal within the\ngiven tolerance. If both `a` and `b` are scalars, returns a single\nboolean value.", "type_name": "array_like", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/isscalar", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "element"], "description": "Input argument, can be of any type and shape.", "arg_name": "element", "type_name": "any", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "True if `element` is a scalar type, False if it is not.", "type_name": "bool", "is_generator": false, "return_name": "val"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "element"], "description": "Input argument, can be of any type and shape.", "arg_name": "element", "type_name": "any", "is_optional": false, "default": null}}], [["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/binary_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "num"], "description": "Only an integer decimal number can be used.", "arg_name": "num", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "width"], "description": "The length of the returned string if `num` is positive, or the length\nof the two's complement if `num` is negative, provided that `width` is\nat least a sufficient number of bits for `num` to be represented in the\ndesignated form.\n\nIf the `width` value is insufficient, it will be ignored, and `num` will\nbe returned in binary (`num` > 0) or two's complement (`num` < 0) form\nwith its width equal to the minimum number of bits needed to represent\nthe number in the designated form. This behavior is deprecated and will\nlater raise an error.\n\n.. deprecated:: 1.12.0", "arg_name": "width", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Binary representation of `num` or two's complement of `num`.", "type_name": "str", "is_generator": false, "return_name": "bin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "num"], "description": "Only an integer decimal number can be used.", "arg_name": "num", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/isneginf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as\nzeros and ones, if the type is boolean then as False and True. The\nreturn value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/binary_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "num"], "description": "Only an integer decimal number can be used.", "arg_name": "num", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "width"], "description": "The length of the returned string if `num` is positive, or the length\nof the two's complement if `num` is negative, provided that `width` is\nat least a sufficient number of bits for `num` to be represented in the\ndesignated form.\n\nIf the `width` value is insufficient, it will be ignored, and `num` will\nbe returned in binary (`num` > 0) or two's complement (`num` < 0) form\nwith its width equal to the minimum number of bits needed to represent\nthe number in the designated form. This behavior is deprecated and will\nlater raise an error.\n\n.. deprecated:: 1.12.0", "arg_name": "width", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Binary representation of `num` or two's complement of `num`.", "type_name": "str", "is_generator": false, "return_name": "bin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "width"], "description": "The length of the returned string if `num` is positive, or the length\nof the two's complement if `num` is negative, provided that `width` is\nat least a sufficient number of bits for `num` to be represented in the\ndesignated form.\n\nIf the `width` value is insufficient, it will be ignored, and `num` will\nbe returned in binary (`num` > 0) or two's complement (`num` < 0) form\nwith its width equal to the minimum number of bits needed to represent\nthe number in the designated form. This behavior is deprecated and will\nlater raise an error.\n\n.. deprecated:: 1.12.0", "arg_name": "width", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/percentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.\n\n.. versionchanged:: 1.9.0\n    A tuple of axes is supported", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.\n\n.. versionadded:: 1.9.0", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/base_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "number"], "description": "The value to convert. Positive and negative values are handled.", "arg_name": "number", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "base"], "description": "Convert `number` to the `base` number system. The valid range is 2-36,\nthe default value is 2.", "arg_name": "base", "type_name": "int", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "padding"], "description": "Number of zeros padded on the left. Default is 0 (no padding).", "arg_name": "padding", "type_name": "int", "is_optional": true, "default": "0"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "String representation of `number` in `base` system.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "number"], "description": "The value to convert. Positive and negative values are handled.", "arg_name": "number", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/eye", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the output.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the output. If None, defaults to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Index of the diagonal: 0 (the default) refers to the main diagonal,\na positive value refers to an upper diagonal, and a negative value\nto a lower diagonal.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether the output should be stored in row-major (C-style) or\ncolumn-major (Fortran-style) order in memory.\n\n.. versionadded:: 1.14.0", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array where all elements are equal to zero, except for the `k`-th\ndiagonal, whose values are equal to one.", "type_name": "ndarray of shape (N,M)", "is_generator": false, "return_name": "I"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array where all elements are equal to zero, except for the `k`-th\ndiagonal, whose values are equal to one.", "type_name": "ndarray of shape (N,M)", "is_generator": false, "return_name": "I"}}]]]
[["localhost:8000/base_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "number"], "description": "The value to convert. Positive and negative values are handled.", "arg_name": "number", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "base"], "description": "Convert `number` to the `base` number system. The valid range is 2-36,\nthe default value is 2.", "arg_name": "base", "type_name": "int", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "padding"], "description": "Number of zeros padded on the left. Default is 0 (no padding).", "arg_name": "padding", "type_name": "int", "is_optional": true, "default": "0"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "String representation of `number` in `base` system.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "base"], "description": "Convert `number` to the `base` number system. The valid range is 2-36,\nthe default value is 2.", "arg_name": "base", "type_name": "int", "is_optional": true, "default": "value"}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}]]]
[["localhost:8000/base_repr", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "number"], "description": "The value to convert. Positive and negative values are handled.", "arg_name": "number", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "base"], "description": "Convert `number` to the `base` number system. The valid range is 2-36,\nthe default value is 2.", "arg_name": "base", "type_name": "int", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "padding"], "description": "Number of zeros padded on the left. Default is 0 (no padding).", "arg_name": "padding", "type_name": "int", "is_optional": true, "default": "0"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "String representation of `number` in `base` system.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "padding"], "description": "Number of zeros padded on the left. Default is 0 (no padding).", "arg_name": "padding", "type_name": "int", "is_optional": true, "default": "0"}}], [["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}], ["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}]]]
[["localhost:8000/ones", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: C", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}], [["localhost:8000/meshgrid", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2,..., xn"], "description": "1-D arrays representing the coordinates of a grid.", "arg_name": "x1, x2,..., xn", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "indexing"], "description": "Cartesian ('xy', default) or matrix ('ij') indexing of output.\nSee Notes for more details.\n\n.. versionadded:: 1.7.0", "arg_name": "indexing", "type_name": "{'xy', 'ij'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "If True a sparse grid is returned in order to conserve memory.\nDefault is False.\n\n.. versionadded:: 1.7.0", "arg_name": "sparse", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If False, a view into the original arrays are returned in order to\nconserve memory.  Default is True.  Please note that\n``sparse=False, copy=False`` will likely return non-contiguous\narrays.  Furthermore, more than one element of a broadcast array\nmay refer to a single memory location.  If you need to write to the\narrays, make copies first.\n\n.. versionadded:: 1.7.0", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": "True."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}], ["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}]]]
[["localhost:8000/ones", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: C", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/ones", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: C", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: C", "is_optional": false, "default": null}}], [["localhost:8000/asfortranarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "str or dtype object", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input `a` in Fortran, or column-major, order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input `a` in Fortran, or column-major, order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/unpackbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "ndarray, uint8 type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-unpacking is done.\n``None`` implies unpacking the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of elements to unpack along `axis`, provided as a way\nof undoing the effect of packing a size that is not a multiple\nof eight. A non-negative number means to only unpack `count`\nbits. A negative number means to trim off that many bits from\nthe end. ``None`` means to unpack the entire array (the\ndefault). Counts larger than the available number of bits will\nadd zero padding to the output. Negative counts must not\nexceed the available number of bits.\n\n.. versionadded:: 1.17.0", "arg_name": "count", "type_name": "int or None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the returned bits. 'big' will mimic bin(val),\n``3 = 0b00000011 => [0, 0, 0, 0, 0, 0, 1, 1]``, 'little' will reverse\nthe order to ``[1, 1, 0, 0, 0, 0, 0, 0]``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The elements are binary-valued (0 or 1).", "type_name": "ndarray, uint8 type", "is_generator": false, "return_name": "unpacked"}}]]]
[["localhost:8000/ones", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: C", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of ones with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/identity", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "Number of rows (and columns) in `n` x `n` output.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the output.  Defaults to ``float``.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`n` x `n` array with its main diagonal set to one,\nand all other elements 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "Number of rows (and columns) in `n` x `n` output.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}], [["localhost:8000/identity", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "Number of rows (and columns) in `n` x `n` output.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the output.  Defaults to ``float``.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`n` x `n` array with its main diagonal set to one,\nand all other elements 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`n` x `n` array with its main diagonal set to one,\nand all other elements 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/mask_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The returned indices will be valid to access arrays of shape (n, n).", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mask_func"], "description": "A function whose call signature is similar to that of `triu`, `tril`.\nThat is, ``mask_func(x, k)`` returns a boolean array, shaped like `x`.\n`k` is an optional argument to the function.", "arg_name": "mask_func", "type_name": "callable", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "An optional argument which is passed through to `mask_func`. Functions\nlike `triu`, `tril` take a second argument that is interpreted as an\noffset.", "arg_name": "k", "type_name": "scalar", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The `n` arrays of indices corresponding to the locations where\n``mask_func(np.ones((n, n)), k)`` is True.", "type_name": "tuple of arrays.", "is_generator": false, "return_name": "indices"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The `n` arrays of indices corresponding to the locations where\n``mask_func(np.ones((n, n)), k)`` is True.", "type_name": "tuple of arrays.", "is_generator": false, "return_name": "indices"}}]]]
[["localhost:8000/identity", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "Number of rows (and columns) in `n` x `n` output.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the output.  Defaults to ``float``.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`n` x `n` array with its main diagonal set to one,\nand all other elements 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the output.  Defaults to ``float``.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "s"}}], [["localhost:8000/not_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays.\nIf ``x1.shape != x2.shape``, they must be broadcastable to a common\nshape (which becomes the shape of the output).", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, element-wise comparison of `x1` and `x2`.\nTypically of type bool, unless ``dtype=object`` is passed.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, element-wise comparison of `x1` and `x2`.\nTypically of type bool, unless ``dtype=object`` is passed.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}], ["localhost:8000/less_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays.\nIf ``x1.shape != x2.shape``, they must be broadcastable to a common\nshape (which becomes the shape of the output).", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, element-wise comparison of `x1` and `x2`.\nTypically of type bool, unless ``dtype=object`` is passed.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, element-wise comparison of `x1` and `x2`.\nTypically of type bool, unless ``dtype=object`` is passed.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/identity", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "Number of rows (and columns) in `n` x `n` output.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the output.  Defaults to ``float``.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`n` x `n` array with its main diagonal set to one,\nand all other elements 0.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/allclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.\n\n.. versionadded:: 1.10.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the two arrays are equal within the given\ntolerance; False otherwise.", "type_name": "bool", "is_generator": false, "return_name": "allclose"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}], ["localhost:8000/fromiter", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "iterable"], "description": "An iterable object providing data for the array.", "arg_name": "iterable", "type_name": "iterable object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "count"], "description": "The number of items to read from *iterable*.  The default is -1,\nwhich means all data is read.", "arg_name": "count", "type_name": "int", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/allclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.\n\n.. versionadded:: 1.10.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the two arrays are equal within the given\ntolerance; False otherwise.", "type_name": "bool", "is_generator": false, "return_name": "allclose"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}], [["localhost:8000/kaiser", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "beta"], "description": "Shape parameter for window.", "arg_name": "beta", "type_name": "float", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/allclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.\n\n.. versionadded:: 1.10.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the two arrays are equal within the given\ntolerance; False otherwise.", "type_name": "bool", "is_generator": false, "return_name": "allclose"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}], [["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/kaiser", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "beta"], "description": "Shape parameter for window.", "arg_name": "beta", "type_name": "float", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "array", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/allclose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays to compare.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rtol"], "description": "The relative tolerance parameter (see Notes).", "arg_name": "rtol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "atol"], "description": "The absolute tolerance parameter (see Notes).", "arg_name": "atol", "type_name": "float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.\n\n.. versionadded:: 1.10.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the two arrays are equal within the given\ntolerance; False otherwise.", "type_name": "bool", "is_generator": false, "return_name": "allclose"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal.  If True, NaN's in `a` will be\nconsidered equal to NaN's in `b` in the output array.\n\n.. versionadded:: 1.10.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/compare_chararrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Arrays to be compared.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "cmp_op"], "description": "Type of comparison.", "arg_name": "cmp_op", "type_name": "{\"<\", \"<=\", \"==\", \">=\", \">\", \"!=\"}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rstrip"], "description": "If True, the spaces at the end of Strings are removed before the comparison.", "arg_name": "rstrip", "type_name": "Boolean", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array of type Boolean with the same shape as a and b.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Arrays to be compared.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/broadcast_to", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array"], "description": "The array to broadcast.", "arg_name": "array", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The shape of the desired array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}]]]
[["localhost:8000/compare_chararrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Arrays to be compared.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "cmp_op"], "description": "Type of comparison.", "arg_name": "cmp_op", "type_name": "{\"<\", \"<=\", \"==\", \">=\", \">\", \"!=\"}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rstrip"], "description": "If True, the spaces at the end of Strings are removed before the comparison.", "arg_name": "rstrip", "type_name": "Boolean", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array of type Boolean with the same shape as a and b.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "cmp_op"], "description": "Type of comparison.", "arg_name": "cmp_op", "type_name": "{\"<\", \"<=\", \"==\", \">=\", \">\", \"!=\"}", "is_optional": false, "default": null}}], [["localhost:8000/min_scalar_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The value whose minimal data type is to be found.", "arg_name": "a", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The minimal data type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}], ["localhost:8000/result_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays_and_dtypes"], "description": "The operands of some operation whose result type is needed.", "arg_name": "arrays_and_dtypes", "type_name": "list of arrays and dtypes", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/compare_chararrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Arrays to be compared.", "arg_name": "a, b", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "cmp_op"], "description": "Type of comparison.", "arg_name": "cmp_op", "type_name": "{\"<\", \"<=\", \"==\", \">=\", \">\", \"!=\"}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rstrip"], "description": "If True, the spaces at the end of Strings are removed before the comparison.", "arg_name": "rstrip", "type_name": "Boolean", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array of type Boolean with the same shape as a and b.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "rstrip"], "description": "If True, the spaces at the end of Strings are removed before the comparison.", "arg_name": "rstrip", "type_name": "Boolean", "is_optional": false, "default": null}}], [["localhost:8000/bartlett", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/putmask", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Target array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mask"], "description": "Boolean mask array. It has to be the same shape as `a`.", "arg_name": "mask", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "Values to put into `a` where `mask` is True. If `values` is smaller\nthan `a` it will be repeated.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Target array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/putmask", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Target array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mask"], "description": "Boolean mask array. It has to be the same shape as `a`.", "arg_name": "mask", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "Values to put into `a` where `mask` is True. If `values` is smaller\nthan `a` it will be repeated.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mask"], "description": "Boolean mask array. It has to be the same shape as `a`.", "arg_name": "mask", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/nanmax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose maximum is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the maximum is computed. The default is to compute\nthe maximum of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary. See\n:ref:`ufuncs-output-type` for more details.\n\n.. versionadded:: 1.8.0", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf the value is anything but the default, then\n`keepdims` will be passed through to the `max` method\nof sub-classes of `ndarray`.  If the sub-classes methods\ndoes not implement `keepdims` any exceptions will be raised.\n\n.. versionadded:: 1.8.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the same shape as `a`, with the specified axis removed.\nIf `a` is a 0-d array, or if axis is None, an ndarray scalar is\nreturned.  The same dtype as `a` is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "nanmax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the same shape as `a`, with the specified axis removed.\nIf `a` is a 0-d array, or if axis is None, an ndarray scalar is\nreturned.  The same dtype as `a` is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "nanmax"}}], ["localhost:8000/nanmin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose minimum is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the minimum is computed. The default is to compute\nthe minimum of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary. See\n:ref:`ufuncs-output-type` for more details.\n\n.. versionadded:: 1.8.0", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf the value is anything but the default, then\n`keepdims` will be passed through to the `min` method\nof sub-classes of `ndarray`.  If the sub-classes methods\ndoes not implement `keepdims` any exceptions will be raised.\n\n.. versionadded:: 1.8.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the same shape as `a`, with the specified axis\nremoved.  If `a` is a 0-d array, or if axis is None, an ndarray\nscalar is returned.  The same dtype as `a` is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "nanmin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the same shape as `a`, with the specified axis\nremoved.  If `a` is a 0-d array, or if axis is None, an ndarray\nscalar is returned.  The same dtype as `a` is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "nanmin"}}]]]
[["localhost:8000/putmask", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Target array.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mask"], "description": "Boolean mask array. It has to be the same shape as `a`.", "arg_name": "mask", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "Values to put into `a` where `mask` is True. If `values` is smaller\nthan `a` it will be repeated.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": null}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "Values to put into `a` where `mask` is True. If `values` is smaller\nthan `a` it will be repeated.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/flatnonzero", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, containing the indices of the elements of `a.ravel()`\nthat are non-zero.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array1, array2, ..."], "description": "Input arrays.", "arg_name": "array1, array2, ...", "type_name": "ndarrays", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/bitwise_not", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Only integer and boolean types are handled.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Result.\nThis is a scalar if `x` is a scalar.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Only integer and boolean types are handled.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/bitwise_not", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Only integer and boolean types are handled.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Result.\nThis is a scalar if `x` is a scalar.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}], [["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}], ["localhost:8000/fix", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "An array of floats to be rounded", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the input broadcasts to. If not provided or None, a\nfreshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A float array with the same dimensions as the input.\nIf second argument is not supplied then a float array is returned\nwith the rounded values.\n\nIf a second argument is supplied the result is stored there.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray of floats", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/bitwise_not", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Only integer and boolean types are handled.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Result.\nThis is a scalar if `x` is a scalar.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/bitwise_not", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Only integer and boolean types are handled.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Result.\nThis is a scalar if `x` is a scalar.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/datetime_data", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The dtype object, which must be a `datetime64` or `timedelta64` type.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}], ["localhost:8000/atleast_1d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more input arrays.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 1``.\nCopies are made only if necessary.", "type_name": "ndarray", "is_generator": false, "return_name": "ret"}}]]]
[["localhost:8000/full", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array  The default, None, means\n `np.array(fill_value).dtype`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}], [["localhost:8000/meshgrid", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2,..., xn"], "description": "1-D arrays representing the coordinates of a grid.", "arg_name": "x1, x2,..., xn", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "indexing"], "description": "Cartesian ('xy', default) or matrix ('ij') indexing of output.\nSee Notes for more details.\n\n.. versionadded:: 1.7.0", "arg_name": "indexing", "type_name": "{'xy', 'ij'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "sparse"], "description": "If True a sparse grid is returned in order to conserve memory.\nDefault is False.\n\n.. versionadded:: 1.7.0", "arg_name": "sparse", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "copy"], "description": "If False, a view into the original arrays are returned in order to\nconserve memory.  Default is True.  Please note that\n``sparse=False, copy=False`` will likely return non-contiguous\narrays.  Furthermore, more than one element of a broadcast array\nmay refer to a single memory location.  If you need to write to the\narrays, make copies first.\n\n.. versionadded:: 1.7.0", "arg_name": "copy", "type_name": "bool", "is_optional": true, "default": "True."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,\nreturn ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'\nor ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'\nwith the elements of `xi` repeated to fill the matrix along\nthe first dimension for `x1`, the second for `x2` and so on.", "type_name": "ndarray", "is_generator": false, "return_name": "X1, X2,..., XN"}}], ["localhost:8000/atleast_3d", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arys1, arys2, ..."], "description": "One or more array-like sequences.  Non-array inputs are converted to\narrays.  Arrays that already have three or more dimensions are\npreserved.", "arg_name": "arys1, arys2, ...", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array, or list of arrays, each with ``a.ndim >= 3``.  Copies are\navoided where possible, and views with three or more dimensions are\nreturned.  For example, a 1-D array of shape ``(N,)`` becomes a view\nof shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\nview of shape ``(M, N, 1)``.", "type_name": "ndarray", "is_generator": false, "return_name": "res1, res2, ..."}}]]]
[["localhost:8000/full", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array  The default, None, means\n `np.array(fill_value).dtype`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar or array_like", "is_optional": false, "default": null}}], [["localhost:8000/nanmean", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose mean is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the means are computed. The default is to compute\nthe mean of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the mean.  For integer inputs, the default\nis `float64`; for inexact inputs, it is the same as the input\ndtype.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary. See\n:ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf the value is anything but the default, then\n`keepdims` will be passed through to the `mean` or `sum` methods\nof sub-classes of `ndarray`.  If the sub-classes methods\ndoes not implement `keepdims` any exceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned. Nan is\nreturned for slices that contain only NaNs.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned. Nan is\nreturned for slices that contain only NaNs.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}], ["localhost:8000/array_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal. If the dtype of a1 and a2 is\ncomplex, values will be considered equal if either the real or the\nimaginary component of a given value is ``nan``.\n\n.. versionadded:: 1.19.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the arrays are equal.", "type_name": "bool", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the arrays are equal.", "type_name": "bool", "is_generator": false, "return_name": "b"}}]]]
[["localhost:8000/full", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array  The default, None, means\n `np.array(fill_value).dtype`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array  The default, None, means\n `np.array(fill_value).dtype`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/full", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array  The default, None, means\n `np.array(fill_value).dtype`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/full", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar or array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type for the array  The default, None, means\n `np.array(fill_value).dtype`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the given shape, dtype, and order.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/full_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/msort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}], ["localhost:8000/sort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be sorted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. If None, the array is flattened before\nsorting. The default is -1, which sorts along the last axis.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort or radix sort under the covers and, in general,\nthe actual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of the same type and shape as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "sorted_array"}}]]]
[["localhost:8000/full_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}], [["localhost:8000/nanmean", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose mean is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the means are computed. The default is to compute\nthe mean of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the mean.  For integer inputs, the default\nis `float64`; for inexact inputs, it is the same as the input\ndtype.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary. See\n:ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf the value is anything but the default, then\n`keepdims` will be passed through to the `mean` or `sum` methods\nof sub-classes of `ndarray`.  If the sub-classes methods\ndoes not implement `keepdims` any exceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned. Nan is\nreturned for slices that contain only NaNs.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned. Nan is\nreturned for slices that contain only NaNs.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}], ["localhost:8000/array_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input arrays.", "arg_name": "a1, a2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "equal_nan"], "description": "Whether to compare NaN's as equal. If the dtype of a1 and a2 is\ncomplex, values will be considered equal if either the real or the\nimaginary component of a given value is ``nan``.\n\n.. versionadded:: 1.19.0", "arg_name": "equal_nan", "type_name": "bool", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the arrays are equal.", "type_name": "bool", "is_generator": false, "return_name": "b"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Returns True if the arrays are equal.", "type_name": "bool", "is_generator": false, "return_name": "b"}}]]]
[["localhost:8000/full_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}], [["localhost:8000/result_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arrays_and_dtypes"], "description": "The operands of some operation whose result type is needed.", "arg_name": "arrays_and_dtypes", "type_name": "list of arrays and dtypes", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result type.", "type_name": "dtype", "is_generator": false, "return_name": "out"}}], ["localhost:8000/trim_zeros", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "filt"], "description": "Input array.", "arg_name": "filt", "type_name": "1-D array or sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "trim"], "description": "A string with 'f' representing trim from front and 'b' to trim from\nback. Default is 'fb', trim zeros from both front and back of the\narray.", "arg_name": "trim", "type_name": "str", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The result of trimming the input. The input data type is preserved.", "type_name": "1-D array or sequence", "is_generator": false, "return_name": "trimmed"}}]]]
[["localhost:8000/full_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}], [["localhost:8000/polyval", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "1D array of polynomial coefficients (including coefficients equal\nto zero) from highest degree to the constant term, or an\ninstance of poly1d.", "arg_name": "p", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "A number, an array of numbers, or an instance of poly1d, at\nwhich to evaluate `p`.", "arg_name": "x", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}], ["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}]]]
[["localhost:8000/full_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}], [["localhost:8000/nanvar", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose variance is desired.  If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the variance is computed.  The default is to compute\nthe variance of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the variance.  For arrays of integer type\nthe default is `float64`; for arrays of float types it is the same as\nthe array type.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output, but the type is cast if\nnecessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ddof"], "description": "\"Delta Degrees of Freedom\": the divisor used in the calculation is\n``N - ddof``, where ``N`` represents the number of non-NaN\nelements. By default `ddof` is zero.", "arg_name": "ddof", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the variance,\notherwise return a reference to the output array. If ddof is >= the\nnumber of non-NaN elements in a slice or the slice contains only\nNaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the variance,\notherwise return a reference to the output array. If ddof is >= the\nnumber of non-NaN elements in a slice or the slice contains only\nNaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "variance"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/full_like", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The shape and data-type of `a` define these same attributes of\nthe returned array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "fill_value"], "description": "Fill value.", "arg_name": "fill_value", "type_name": "scalar", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Overrides the data type of the result.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Overrides the memory layout of the result. 'C' means C-order,\n'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n'C' otherwise. 'K' means match the layout of `a` as closely\nas possible.", "arg_name": "order", "type_name": "{'C', 'F', 'A', or 'K'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then the newly created array will use the sub-class\ntype of `a`, otherwise it will be a base-class array. Defaults\nto True.", "arg_name": "subok", "type_name": "bool, optional.", "is_optional": false, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of `fill_value` with the same shape and type as `a`.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Overrides the shape of the result. If order='K' and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder='C' is implied.\n\n.. versionadded:: 1.17.0", "arg_name": "shape", "type_name": "int or sequence of ints, optional.", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/matmul", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays, scalars not allowed.", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\nprovided or None, a freshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.16\n   Now handles ufunc kwargs", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays, scalars not allowed.", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/concatenate", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2, ..."], "description": "The arrays must have the same shape, except in the dimension\ncorresponding to `axis` (the first, by default).", "arg_name": "a1, a2, ...", "type_name": "sequence of array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which the arrays will be joined.  If axis is None,\narrays are flattened before use.  Default is 0.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the destination to place the result. The shape must be\ncorrect, matching that of what concatenate would have returned if no\nout argument were specified.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "If provided, the destination array will have this dtype. Cannot be\nprovided together with `out`.\n\n.. versionadded:: 1.20.0", "arg_name": "dtype", "type_name": "str or dtype", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "casting"], "description": "Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\n.. versionadded:: 1.20.0", "arg_name": "casting", "type_name": "{'no', 'equiv', 'safe', 'same_kind', 'unsafe'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The concatenated array.", "type_name": "ndarray", "is_generator": false, "return_name": "res"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/matmul", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays, scalars not allowed.", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\nprovided or None, a freshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.16\n   Now handles ufunc kwargs", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\nprovided or None, a freshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/matmul", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays, scalars not allowed.", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\nprovided or None, a freshly-allocated array is returned.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.16\n   Now handles ufunc kwargs", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The matrix product of the inputs.\nThis is a scalar only when both x1, x2 are 1-d vectors.", "type_name": "ndarray", "is_generator": false, "return_name": "y"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.16\n   Now handles ufunc kwargs", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/datetime_data", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The dtype object, which must be a `datetime64` or `timedelta64` type.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}], ["localhost:8000/get_printoptions", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dictionary of current print options with keys\n\n  - precision : int\n  - threshold : int\n  - edgeitems : int\n  - linewidth : int\n  - suppress : bool\n  - nanstr : str\n  - infstr : str\n  - formatter : dict of callables\n  - sign : str\n\nFor a full description of these options, see `set_printoptions`.", "type_name": "dict", "is_generator": false, "return_name": "print_opts"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dictionary of current print options with keys\n\n  - precision : int\n  - threshold : int\n  - edgeitems : int\n  - linewidth : int\n  - suppress : bool\n  - nanstr : str\n  - infstr : str\n  - formatter : dict of callables\n  - sign : str\n\nFor a full description of these options, see `set_printoptions`.", "type_name": "dict", "is_generator": false, "return_name": "print_opts"}}]]]
[["localhost:8000/shares_memory", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays", "arg_name": "a, b", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_work"], "description": "Effort to spend on solving the overlap problem (maximum number\nof candidate solutions to consider). The following special\nvalues are recognized:\n\nmax_work=MAY_SHARE_EXACT  (default)\n    The problem is solved exactly. In this case, the function returns\n    True only if there is an element shared between the arrays. Finding\n    the exact solution may take extremely long in some cases.\nmax_work=MAY_SHARE_BOUNDS\n    Only the memory bounds of a and b are checked.", "arg_name": "max_work", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": null, "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_work"], "description": "Effort to spend on solving the overlap problem (maximum number\nof candidate solutions to consider). The following special\nvalues are recognized:\n\nmax_work=MAY_SHARE_EXACT  (default)\n    The problem is solved exactly. In this case, the function returns\n    True only if there is an element shared between the arrays. Finding\n    the exact solution may take extremely long in some cases.\nmax_work=MAY_SHARE_BOUNDS\n    Only the memory bounds of a and b are checked.", "arg_name": "max_work", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/blackman", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an empty\narray is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/may_share_memory", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays", "arg_name": "a, b", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_work"], "description": "Effort to spend on solving the overlap problem.  See\n`shares_memory` for details.  Default for ``may_share_memory``\nis to do a bounds check.", "arg_name": "max_work", "type_name": "int", "is_optional": true, "default": "for"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": null, "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays", "arg_name": "a, b", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/may_share_memory", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays", "arg_name": "a, b", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_work"], "description": "Effort to spend on solving the overlap problem.  See\n`shares_memory` for details.  Default for ``may_share_memory``\nis to do a bounds check.", "arg_name": "max_work", "type_name": "int", "is_optional": true, "default": "for"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": null, "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_work"], "description": "Effort to spend on solving the overlap problem.  See\n`shares_memory` for details.  Default for ``may_share_memory``\nis to do a bounds check.", "arg_name": "max_work", "type_name": "int", "is_optional": true, "default": "for"}}], [["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}], ["localhost:8000/average", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing data to be averaged. If `a` is not an array, a\nconversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to average `a`.  The default,\naxis=None, will average over all of the elements of the input array.\nIf axis is negative it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf axis is a tuple of ints, averaging is performed on all of the axes\nspecified in the tuple instead of a single axis or all the axes as\nbefore.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights associated with the values in `a`. Each value in\n`a` contributes to the average according to its associated weight.\nThe weights array can either be 1-D (in which case its length must be\nthe size of `a` along the given axis) or of the same shape as `a`.\nIf `weights=None`, then all data in `a` are assumed to have a\nweight equal to one.  The 1-D calculation is::\n\n    avg = sum(a * weights) / sum(weights)\n\nThe only constraint on `weights` is that `sum(weights)` must not be 0.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "returned"], "description": "Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\nis returned, otherwise only the average is returned.\nIf `weights=None`, `sum_of_weights` is equivalent to the number of\nelements over which the average is taken.", "arg_name": "returned", "type_name": "bool", "is_optional": true, "default": "is"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Return the average along the specified axis. When `returned` is `True`,\nreturn a tuple with the average as the first element and the sum\nof the weights as the second element. `sum_of_weights` is of the\nsame type as `retval`. The result dtype follows a genereal pattern.\nIf `weights` is None, the result dtype will be that of `a` , or ``float64``\nif `a` is integral. Otherwise, if `weights` is not None and `a` is non-\nintegral, the result type will be the type of lowest precision capable of\nrepresenting values of both `a` and `weights`. If `a` happens to be\nintegral, the previous rules still applies but the result dtype will\nat least be ``float64``.", "type_name": "array_type or double", "is_generator": false, "return_name": "retval, [sum_of_weights]"}}]]]
[["localhost:8000/shares_memory", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays", "arg_name": "a, b", "type_name": "ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "max_work"], "description": "Effort to spend on solving the overlap problem (maximum number\nof candidate solutions to consider). The following special\nvalues are recognized:\n\nmax_work=MAY_SHARE_EXACT  (default)\n    The problem is solved exactly. In this case, the function returns\n    True only if there is an element shared between the arrays. Finding\n    the exact solution may take extremely long in some cases.\nmax_work=MAY_SHARE_BOUNDS\n    Only the memory bounds of a and b are checked.", "arg_name": "max_work", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": null, "type_name": "bool", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a, b"], "description": "Input arrays", "arg_name": "a, b", "type_name": "ndarray", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/alen", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Length of the first dimension of `a`.", "type_name": "int", "is_generator": false, "return_name": "alen"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/all", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical AND reduction is performed.\nThe default (``axis=None``) is to perform a logical AND over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.\nIt must have the same shape as the expected output and its\ntype is preserved (e.g., if ``dtype(out)`` is float, the result\nwill consist of 0.0's and 1.0's). See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `all` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for all `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or array is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "all"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/all", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical AND reduction is performed.\nThe default (``axis=None``) is to perform a logical AND over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.\nIt must have the same shape as the expected output and its\ntype is preserved (e.g., if ``dtype(out)`` is float, the result\nwill consist of 0.0's and 1.0's). See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `all` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for all `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or array is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "all"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical AND reduction is performed.\nThe default (``axis=None``) is to perform a logical AND over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/nanquantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n* linear: ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* lower: ``i``.\n* higher: ``j``.\n* nearest: ``i`` or ``j``, whichever is nearest.\n* midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/all", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical AND reduction is performed.\nThe default (``axis=None``) is to perform a logical AND over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.\nIt must have the same shape as the expected output and its\ntype is preserved (e.g., if ``dtype(out)`` is float, the result\nwill consist of 0.0's and 1.0's). See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `all` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for all `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or array is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "all"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.\nIt must have the same shape as the expected output and its\ntype is preserved (e.g., if ``dtype(out)`` is float, the result\nwill consist of 0.0's and 1.0's). See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/nanmedian", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}], ["localhost:8000/median", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the medians are computed. The default\nis to compute the median along a flattened version of the array.\nA sequence of axes is supported since version 1.9.0.", "arg_name": "axis", "type_name": "{int, sequence of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow use of memory of input array `a` for\ncalculations. The input array will be modified by the call to\n`median`. This will save memory when you do not need to preserve\nthe contents of the input array. Treat the input as undefined,\nbut it will probably be fully or partially sorted. Default is\nFalse. If `overwrite_input` is ``True`` and `a` is not already an\n`ndarray`, an error will be raised.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `arr`.\n\n.. versionadded:: 1.9.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result. If the input contains integers\nor floats smaller than ``float64``, then the output data-type is\n``np.float64``.  Otherwise, the data-type of the output is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "ndarray", "is_generator": false, "return_name": "median"}}]]]
[["localhost:8000/all", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical AND reduction is performed.\nThe default (``axis=None``) is to perform a logical AND over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.\nIt must have the same shape as the expected output and its\ntype is preserved (e.g., if ``dtype(out)`` is float, the result\nwill consist of 0.0's and 1.0's). See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `all` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for all `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or array is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "all"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `all` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/all", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical AND reduction is performed.\nThe default (``axis=None``) is to perform a logical AND over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.\nIt must have the same shape as the expected output and its\ntype is preserved (e.g., if ``dtype(out)`` is float, the result\nwill consist of 0.0's and 1.0's). See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `all` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for all `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or array is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "all"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for all `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], [["localhost:8000/isin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "element"], "description": "Input array.", "arg_name": "element", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "test_elements"], "description": "The values against which to test each value of `element`.\nThis argument is flattened if it is an array or array_like.\nSee notes for behavior with non-array-like parameters.", "arg_name": "test_elements", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "assume_unique"], "description": "If True, the input arrays are both assumed to be unique, which\ncan speed up the calculation.  Default is False.", "arg_name": "assume_unique", "type_name": "bool", "is_optional": true, "default": "False."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "invert"], "description": "If True, the values in the returned array are inverted, as if\ncalculating `element not in test_elements`. Default is False.\n``np.isin(a, b, invert=True)`` is equivalent to (but faster\nthan) ``np.invert(np.isin(a, b))``.", "arg_name": "invert", "type_name": "bool", "is_optional": true, "default": "False."}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Has the same shape as `element`. The values `element[isin]`\nare in `test_elements`.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "isin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Has the same shape as `element`. The values `element[isin]`\nare in `test_elements`.", "type_name": "ndarray, bool", "is_generator": false, "return_name": "isin"}}], ["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}]]]
[["localhost:8000/amax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Maximum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array1, array2, ..."], "description": "Input arrays.", "arg_name": "array1, array2, ...", "type_name": "ndarrays", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/amax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Maximum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/polyadd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/amax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Maximum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}]]]
[["localhost:8000/amax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Maximum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/amax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Maximum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}], [["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/amax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the maximum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amax` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The minimum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Maximum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amax"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the maximum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], [["localhost:8000/histogram", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data. The histogram is computed over the flattened array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bins"], "description": "If `bins` is an int, it defines the number of equal-width\nbins in the given range (10, by default). If `bins` is a\nsequence, it defines a monotonically increasing array of bin edges,\nincluding the rightmost edge, allowing for non-uniform bin widths.\n\n.. versionadded:: 1.11.0\n\nIf `bins` is a string, it defines the method used to calculate the\noptimal bin width, as defined by `histogram_bin_edges`.", "arg_name": "bins", "type_name": "int or sequence of scalars or str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "range"], "description": "The lower and upper range of the bins.  If not provided, range\nis simply ``(a.min(), a.max())``.  Values outside the range are\nignored. The first element of the range must be less than or\nequal to the second. `range` affects the automatic bin\ncomputation as well. While bin width is computed to be optimal\nbased on the actual data within `range`, the bin count will fill\nthe entire range including portions containing no data.", "arg_name": "range", "type_name": "(float, float)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "normed"], "description": ".. deprecated:: 1.6.0\n\nThis is equivalent to the `density` argument, but produces incorrect\nresults for unequal bin widths. It should not be used.\n\n.. versionchanged:: 1.15.0\n    DeprecationWarnings are actually emitted.", "arg_name": "normed", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights, of the same shape as `a`.  Each value in\n`a` only contributes its associated weight towards the bin count\n(instead of 1). If `density` is True, the weights are\nnormalized, so that the integral of the density over the range\nremains 1.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "density"], "description": "If ``False``, the result will contain the number of samples in\neach bin. If ``True``, the result is the value of the\nprobability *density* function at the bin, normalized such that\nthe *integral* over the range is 1. Note that the sum of the\nhistogram values will not be equal to 1 unless bins of unity\nwidth are chosen; it is not a probability *mass* function.\n\nOverrides the ``normed`` keyword if given.", "arg_name": "density", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The values of the histogram. See `density` and `weights` for a\ndescription of the possible semantics.", "type_name": "array", "is_generator": false, "return_name": "hist"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The values of the histogram. See `density` and `weights` for a\ndescription of the possible semantics.", "type_name": "array", "is_generator": false, "return_name": "hist"}}], ["localhost:8000/angle", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "z"], "description": "A complex number or sequence of complex numbers.", "arg_name": "z", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "deg"], "description": "Return angle in degrees if True, radians if False (default).", "arg_name": "deg", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The counterclockwise angle from the positive real axis on the complex\nplane in the range ``(-pi, pi]``, with dtype as numpy.float64.\n\n.. versionchanged:: 1.16.0\n    This function works on subclasses of ndarray like `ma.array`.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "angle"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The counterclockwise angle from the positive real axis on the complex\nplane in the range ``(-pi, pi]``, with dtype as numpy.float64.\n\n.. versionchanged:: 1.16.0\n    This function works on subclasses of ndarray like `ma.array`.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "angle"}}]]]
[["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array1, array2, ..."], "description": "Input arrays.", "arg_name": "array1, array2, ...", "type_name": "ndarrays", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/polyadd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}]]]
[["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}], [["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/amin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which to operate.  By default, flattened input is\nused.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, the minimum is selected over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result.  Must\nbe of the same shape and buffer length as the expected output.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `amin` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "initial"], "description": "The maximum value of an output element. Must be present to allow\ncomputation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.15.0", "arg_name": "initial", "type_name": "scalar", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Minimum of `a`. If `axis` is None, the result is a scalar value.\nIf `axis` is given, the result is an array of dimension\n``a.ndim - 1``.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "amin"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to compare for the minimum. See `~numpy.ufunc.reduce`\nfor details.\n\n.. versionadded:: 1.17.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], [["localhost:8000/angle", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "z"], "description": "A complex number or sequence of complex numbers.", "arg_name": "z", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "deg"], "description": "Return angle in degrees if True, radians if False (default).", "arg_name": "deg", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The counterclockwise angle from the positive real axis on the complex\nplane in the range ``(-pi, pi]``, with dtype as numpy.float64.\n\n.. versionchanged:: 1.16.0\n    This function works on subclasses of ndarray like `ma.array`.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "angle"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The counterclockwise angle from the positive real axis on the complex\nplane in the range ``(-pi, pi]``, with dtype as numpy.float64.\n\n.. versionchanged:: 1.16.0\n    This function works on subclasses of ndarray like `ma.array`.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "angle"}}], ["localhost:8000/histogram", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data. The histogram is computed over the flattened array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bins"], "description": "If `bins` is an int, it defines the number of equal-width\nbins in the given range (10, by default). If `bins` is a\nsequence, it defines a monotonically increasing array of bin edges,\nincluding the rightmost edge, allowing for non-uniform bin widths.\n\n.. versionadded:: 1.11.0\n\nIf `bins` is a string, it defines the method used to calculate the\noptimal bin width, as defined by `histogram_bin_edges`.", "arg_name": "bins", "type_name": "int or sequence of scalars or str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "range"], "description": "The lower and upper range of the bins.  If not provided, range\nis simply ``(a.min(), a.max())``.  Values outside the range are\nignored. The first element of the range must be less than or\nequal to the second. `range` affects the automatic bin\ncomputation as well. While bin width is computed to be optimal\nbased on the actual data within `range`, the bin count will fill\nthe entire range including portions containing no data.", "arg_name": "range", "type_name": "(float, float)", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "normed"], "description": ".. deprecated:: 1.6.0\n\nThis is equivalent to the `density` argument, but produces incorrect\nresults for unequal bin widths. It should not be used.\n\n.. versionchanged:: 1.15.0\n    DeprecationWarnings are actually emitted.", "arg_name": "normed", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "weights"], "description": "An array of weights, of the same shape as `a`.  Each value in\n`a` only contributes its associated weight towards the bin count\n(instead of 1). If `density` is True, the weights are\nnormalized, so that the integral of the density over the range\nremains 1.", "arg_name": "weights", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "density"], "description": "If ``False``, the result will contain the number of samples in\neach bin. If ``True``, the result is the value of the\nprobability *density* function at the bin, normalized such that\nthe *integral* over the range is 1. Note that the sum of the\nhistogram values will not be equal to 1 unless bins of unity\nwidth are chosen; it is not a probability *mass* function.\n\nOverrides the ``normed`` keyword if given.", "arg_name": "density", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The values of the histogram. See `density` and `weights` for a\ndescription of the possible semantics.", "type_name": "array", "is_generator": false, "return_name": "hist"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The values of the histogram. See `density` and `weights` for a\ndescription of the possible semantics.", "type_name": "array", "is_generator": false, "return_name": "hist"}}]]]
[["localhost:8000/any", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical OR reduction is performed.\nThe default (``axis=None``) is to perform a logical OR over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output and its type is preserved\n(e.g., if it is of type float, then it will remain so, returning\n1.0 for True and 0.0 for False, regardless of the type of `a`).\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `any` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for any `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or `ndarray` is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "bool or ndarray", "is_generator": false, "return_name": "any"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/any", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical OR reduction is performed.\nThe default (``axis=None``) is to perform a logical OR over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output and its type is preserved\n(e.g., if it is of type float, then it will remain so, returning\n1.0 for True and 0.0 for False, regardless of the type of `a`).\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `any` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for any `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or `ndarray` is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "bool or ndarray", "is_generator": false, "return_name": "any"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical OR reduction is performed.\nThe default (``axis=None``) is to perform a logical OR over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], [["localhost:8000/nanquantile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Quantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the quantiles are computed. The\ndefault is to compute the quantile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired quantile lies between two data points\n``i < j``:\n\n* linear: ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* lower: ``i``.\n* higher: ``j``.\n* nearest: ``i`` or ``j``, whichever is nearest.\n* midpoint: ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple quantiles are given, first axis of\nthe result corresponds to the quantiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "quantile"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/any", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical OR reduction is performed.\nThe default (``axis=None``) is to perform a logical OR over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output and its type is preserved\n(e.g., if it is of type float, then it will remain so, returning\n1.0 for True and 0.0 for False, regardless of the type of `a`).\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `any` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for any `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or `ndarray` is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "bool or ndarray", "is_generator": false, "return_name": "any"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output and its type is preserved\n(e.g., if it is of type float, then it will remain so, returning\n1.0 for True and 0.0 for False, regardless of the type of `a`).\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/nanstd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Calculate the standard deviation of the non-NaN values.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the standard deviation is computed. The default is\nto compute the standard deviation of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the standard deviation. For arrays of\ninteger type the default is float64, for arrays of float types it\nis the same as the array type.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "float64"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output but the type (of the\ncalculated values) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "ddof"], "description": "Means Delta Degrees of Freedom.  The divisor used in calculations\nis ``N - ddof``, where ``N`` represents the number of non-NaN\nelements.  By default `ddof` is zero.", "arg_name": "ddof", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\nIf this value is anything but the default it is passed through\nas-is to the relevant functions of the sub-classes.  If these\nfunctions do not have a `keepdims` kwarg, a RuntimeError will\nbe raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "it"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the standard\ndeviation, otherwise return a reference to the output array. If\nddof is >= the number of non-NaN elements in a slice or the slice\ncontains only NaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above.", "is_generator": false, "return_name": "standard_deviation"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out` is None, return a new array containing the standard\ndeviation, otherwise return a reference to the output array. If\nddof is >= the number of non-NaN elements in a slice or the slice\ncontains only NaNs, then the result for that slice is NaN.", "type_name": "ndarray, see dtype parameter above.", "is_generator": false, "return_name": "standard_deviation"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/any", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical OR reduction is performed.\nThe default (``axis=None``) is to perform a logical OR over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output and its type is preserved\n(e.g., if it is of type float, then it will remain so, returning\n1.0 for True and 0.0 for False, regardless of the type of `a`).\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `any` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for any `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or `ndarray` is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "bool or ndarray", "is_generator": false, "return_name": "any"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `any` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], [["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/any", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which a logical OR reduction is performed.\nThe default (``axis=None``) is to perform a logical OR over all\nthe dimensions of the input array. `axis` may be negative, in\nwhich case it counts from the last to the first axis.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a reduction is performed on multiple\naxes, instead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  It must have\nthe same shape as the expected output and its type is preserved\n(e.g., if it is of type float, then it will remain so, returning\n1.0 for True and 0.0 for False, regardless of the type of `a`).\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `any` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for any `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new boolean or `ndarray` is returned unless `out` is specified,\nin which case a reference to `out` is returned.", "type_name": "bool or ndarray", "is_generator": false, "return_name": "any"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in checking for any `True` values.\nSee `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], [["localhost:8000/insert", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Object that defines the index or indices before which `values` is\ninserted.\n\n.. versionadded:: 1.8.0\n\nSupport for multiple insertions when `obj` is a single scalar or a\nsequence with one element (similar to calling insert multiple\ntimes).", "arg_name": "obj", "type_name": "int, slice or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "Values to insert into `arr`. If the type of `values` is different\nfrom that of `arr`, `values` is converted to the type of `arr`.\n`values` should be shaped so that ``arr[...,obj,...] = values``\nis legal.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to insert `values`.  If `axis` is None then `arr`\nis flattened first.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` inserted.  Note that `insert`\ndoes not occur in-place: a new array is returned. If\n`axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` inserted.  Note that `insert`\ndoes not occur in-place: a new array is returned. If\n`axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}]]]
[["localhost:8000/argmax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices into the array. It has the same shape as `a.shape`\nwith the dimension along `axis` removed.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/argmax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices into the array. It has the same shape as `a.shape`\nwith the dimension along `axis` removed.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/lexsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keys"], "description": "The `k` different \"columns\" to be sorted.  The last column (or row if\n`keys` is a 2D array) is the primary sort key.", "arg_name": "keys", "type_name": "(k, N) array or tuple containing k (N,)-shaped sequences", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis to be indirectly sorted.  By default, sort over the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort the keys along the specified axis.", "type_name": "(N,) ndarray of ints", "is_generator": false, "return_name": "indices"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort the keys along the specified axis.", "type_name": "(N,) ndarray of ints", "is_generator": false, "return_name": "indices"}}]]]
[["localhost:8000/argmax", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices into the array. It has the same shape as `a.shape`\nwith the dimension along `axis` removed.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], [["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/argmin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices into the array. It has the same shape as `a.shape`\nwith the dimension along `axis` removed.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/argmin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices into the array. It has the same shape as `a.shape`\nwith the dimension along `axis` removed.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/tril_indices", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "n"], "description": "The row dimension of the arrays for which the returned\nindices will be valid.", "arg_name": "n", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Diagonal offset (see `tril` for details).", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "m"], "description": ".. versionadded:: 1.9.0\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default `m` is taken equal to `n`.", "arg_name": "m", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The indices for the triangle. The returned tuple contains two arrays,\neach with the indices along one dimension of the array.", "type_name": "tuple of arrays", "is_generator": false, "return_name": "inds"}}], ["localhost:8000/lexsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keys"], "description": "The `k` different \"columns\" to be sorted.  The last column (or row if\n`keys` is a 2D array) is the primary sort key.", "arg_name": "keys", "type_name": "(k, N) array or tuple containing k (N,)-shaped sequences", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis to be indirectly sorted.  By default, sort over the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort the keys along the specified axis.", "type_name": "(N,) ndarray of ints", "is_generator": false, "return_name": "indices"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort the keys along the specified axis.", "type_name": "(N,) ndarray of ints", "is_generator": false, "return_name": "indices"}}]]]
[["localhost:8000/argmin", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "By default, the index is into the flattened array, otherwise\nalong the specified axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices into the array. It has the same shape as `a.shape`\nwith the dimension along `axis` removed.", "type_name": "ndarray of ints", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], [["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/argpartition", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th element will be in its\nfinal sorted position and all smaller elements will be moved\nbefore it and all larger elements behind it. The order all\nelements in the partitions is undefined. If provided with a\nsequence of k-th it will partition all of them into their sorted\nposition at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. The default is -1 (the last axis). If\nNone, the flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc. A single\nfield can be specified as a string, and not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that partition `a` along the specified axis.\nIf `a` is one-dimensional, ``a[index_array]`` yields a partitioned `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=a)`` always\nyields the partitioned `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/recarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of output array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type.  By default, the data-type is determined\nfrom `formats`, `names`, `titles`, `aligned` and `byteorder`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formats"], "description": "A list containing the data-types for the different columns, e.g.\n``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\nconvention of using types directly, i.e. ``(int, float, int)``.\nNote that `formats` must be a list, not a tuple.\nGiven that `formats` is somewhat limited, we recommend specifying\n`dtype` instead.", "arg_name": "formats", "type_name": "list of data-types", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "The name of each column, e.g. ``('x', 'y', 'z')``.", "arg_name": "names", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buf"], "description": "By default, a new array is created of the given shape and data-type.\nIf `buf` is specified and is an object exposing the buffer interface,\nthe array will use the memory from the existing buffer.  In this case,\nthe `offset` and `strides` keywords are available.", "arg_name": "buf", "type_name": "buffer", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "titles"], "description": "Aliases for column names.  For example, if `names` were\n``('x', 'y', 'z')`` and `titles` is\n``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.", "arg_name": "titles", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "byteorder"], "description": "Byte-order for all fields.", "arg_name": "byteorder", "type_name": "{'<', '>', '='}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "aligned"], "description": "Align the fields in memory as the C-compiler would.", "arg_name": "aligned", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "strides"], "description": "Buffer (`buf`) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "offset"], "description": "Start reading buffer (`buf`) from this offset onwards.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}], ["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/argpartition", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th element will be in its\nfinal sorted position and all smaller elements will be moved\nbefore it and all larger elements behind it. The order all\nelements in the partitions is undefined. If provided with a\nsequence of k-th it will partition all of them into their sorted\nposition at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. The default is -1 (the last axis). If\nNone, the flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc. A single\nfield can be specified as a string, and not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that partition `a` along the specified axis.\nIf `a` is one-dimensional, ``a[index_array]`` yields a partitioned `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=a)`` always\nyields the partitioned `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th element will be in its\nfinal sorted position and all smaller elements will be moved\nbefore it and all larger elements behind it. The order all\nelements in the partitions is undefined. If provided with a\nsequence of k-th it will partition all of them into their sorted\nposition at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}], [["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/argpartition", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th element will be in its\nfinal sorted position and all smaller elements will be moved\nbefore it and all larger elements behind it. The order all\nelements in the partitions is undefined. If provided with a\nsequence of k-th it will partition all of them into their sorted\nposition at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. The default is -1 (the last axis). If\nNone, the flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc. A single\nfield can be specified as a string, and not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that partition `a` along the specified axis.\nIf `a` is one-dimensional, ``a[index_array]`` yields a partitioned `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=a)`` always\nyields the partitioned `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. The default is -1 (the last axis). If\nNone, the flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}], [["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}], ["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}]]]
[["localhost:8000/argpartition", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th element will be in its\nfinal sorted position and all smaller elements will be moved\nbefore it and all larger elements behind it. The order all\nelements in the partitions is undefined. If provided with a\nsequence of k-th it will partition all of them into their sorted\nposition at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. The default is -1 (the last axis). If\nNone, the flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc. A single\nfield can be specified as a string, and not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that partition `a` along the specified axis.\nIf `a` is one-dimensional, ``a[index_array]`` yields a partitioned `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=a)`` always\nyields the partitioned `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}], [["localhost:8000/asscalar", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array of size 1.", "arg_name": "a", "type_name": "ndarray", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Scalar representation of `a`. The output data type is the same type\nreturned by the input's `item` method.", "type_name": "scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Scalar representation of `a`. The output data type is the same type\nreturned by the input's `item` method.", "type_name": "scalar", "is_generator": false, "return_name": "out"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/argpartition", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kth"], "description": "Element index to partition by. The k-th element will be in its\nfinal sorted position and all smaller elements will be moved\nbefore it and all larger elements behind it. The order all\nelements in the partitions is undefined. If provided with a\nsequence of k-th it will partition all of them into their sorted\nposition at once.", "arg_name": "kth", "type_name": "int or sequence of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort. The default is -1 (the last axis). If\nNone, the flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Selection algorithm. Default is 'introselect'", "arg_name": "kind", "type_name": "{'introselect'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc. A single\nfield can be specified as a string, and not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that partition `a` along the specified axis.\nIf `a` is one-dimensional, ``a[index_array]`` yields a partitioned `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=a)`` always\nyields the partitioned `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument\nspecifies which fields to compare first, second, etc. A single\nfield can be specified as a string, and not all fields need be\nspecified, but unspecified fields will still be used, in the\norder in which they come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], [["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/argsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/recarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of output array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The desired data-type.  By default, the data-type is determined\nfrom `formats`, `names`, `titles`, `aligned` and `byteorder`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "formats"], "description": "A list containing the data-types for the different columns, e.g.\n``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\nconvention of using types directly, i.e. ``(int, float, int)``.\nNote that `formats` must be a list, not a tuple.\nGiven that `formats` is somewhat limited, we recommend specifying\n`dtype` instead.", "arg_name": "formats", "type_name": "list of data-types", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "names"], "description": "The name of each column, e.g. ``('x', 'y', 'z')``.", "arg_name": "names", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "buf"], "description": "By default, a new array is created of the given shape and data-type.\nIf `buf` is specified and is an object exposing the buffer interface,\nthe array will use the memory from the existing buffer.  In this case,\nthe `offset` and `strides` keywords are available.", "arg_name": "buf", "type_name": "buffer", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "titles"], "description": "Aliases for column names.  For example, if `names` were\n``('x', 'y', 'z')`` and `titles` is\n``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.", "arg_name": "titles", "type_name": "tuple of str", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "byteorder"], "description": "Byte-order for all fields.", "arg_name": "byteorder", "type_name": "{'<', '>', '='}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "aligned"], "description": "Align the fields in memory as the C-compiler would.", "arg_name": "aligned", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "strides"], "description": "Buffer (`buf`) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).", "arg_name": "strides", "type_name": "tuple of ints", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "offset"], "description": "Start reading buffer (`buf`) from this offset onwards.", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["other_param", "order"], "description": "Row-major (C-style) or column-major (Fortran-style) order.", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Empty array of the given shape and type.", "type_name": "recarray", "is_generator": false, "return_name": "rec"}}], ["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}]]]
[["localhost:8000/argsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}], [["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}], ["localhost:8000/repeat", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "repeats"], "description": "The number of repetitions for each element.  `repeats` is broadcasted\nto fit the shape of the given axis.", "arg_name": "repeats", "type_name": "int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to repeat values.  By default, use the\nflattened input array, and return a flat output array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array which has the same shape as `a`, except along\nthe given axis.", "type_name": "ndarray", "is_generator": false, "return_name": "repeated_array"}}]]]
[["localhost:8000/argsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/geterrobj", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The error object, a list containing three elements:\n[internal numpy buffer size, error mask, error callback function].\n\nThe error mask is a single integer that holds the treatment information\non all four floating point errors. The information for each error type\nis contained in three bits of the integer. If we print it in base 8, we\ncan see what treatment is set for \"invalid\", \"under\", \"over\", and\n\"divide\" (in that order). The printed string can be interpreted with\n\n* 0 : 'ignore'\n* 1 : 'warn'\n* 2 : 'raise'\n* 3 : 'call'\n* 4 : 'print'\n* 5 : 'log'", "type_name": "list", "is_generator": false, "return_name": "errobj"}}]]]
[["localhost:8000/argsort", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to sort.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to sort.  The default is -1 (the last axis). If None,\nthe flattened array is used.", "arg_name": "axis", "type_name": "int or None", "is_optional": true, "default": "-1"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "kind"], "description": "Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\nand 'mergesort' use timsort under the covers and, in general, the\nactual implementation will vary with data type. The 'mergesort' option\nis retained for backwards compatibility.\n\n.. versionchanged:: 1.15.0.\n   The 'stable' option was added.", "arg_name": "kind", "type_name": "{'quicksort', 'mergesort', 'heapsort', 'stable'}", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of indices that sort `a` along the specified `axis`.\nIf `a` is one-dimensional, ``a[index_array]`` yields a sorted `a`.\nMore generally, ``np.take_along_axis(a, index_array, axis=axis)``\nalways yields the sorted `a`, irrespective of dimensionality.", "type_name": "ndarray, int", "is_generator": false, "return_name": "index_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "When `a` is an array with fields defined, this argument specifies\nwhich fields to compare first, second, etc.  A single field can\nbe specified as a string, and not all fields need be specified,\nbut unspecified fields will still be used, in the order in which\nthey come up in the dtype, to break ties.", "arg_name": "order", "type_name": "str or list of str", "is_optional": true, "default": null}}], [["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array1, array2, ..."], "description": "Input arrays.", "arg_name": "array1, array2, ...", "type_name": "ndarrays", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Data type code.", "type_name": "data type code", "is_generator": false, "return_name": "out"}}], ["localhost:8000/typename", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "char"], "description": "Data type code.", "arg_name": "char", "type_name": "str", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Description of the input data type code.", "type_name": "str", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}], [["localhost:8000/blackman", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an empty\narray is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value one\nappears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/hamming", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The window, with the maximum value normalized to one (the value\none appears only if the number of samples is odd).", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/choose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "This array must contain integers in `[0, n-1]`, where `n` is the number\nof choices, unless ``mode=wrap`` or ``mode=clip``, in which cases any\nintegers are permissible.", "arg_name": "a", "type_name": "int array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "choices"], "description": "Choice arrays. `a` and all of the choices must be broadcastable to the\nsame shape.  If `choices` is itself an array (not recommended), then\nits outermost dimension (i.e., the one corresponding to\n``choices.shape[0]``) is taken as defining the \"sequence\".", "arg_name": "choices", "type_name": "sequence of arrays", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype. Note that `out` is always\nbuffered if `mode='raise'`; use other modes for better performance.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Specifies how indices outside `[0, n-1]` will be treated:\n\n  * 'raise' : an exception is raised\n  * 'wrap' : value becomes value mod `n`\n  * 'clip' : values < 0 are mapped to 0, values > n-1 are mapped to n-1", "arg_name": "mode", "type_name": "{'raise' (default), 'wrap', 'clip'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The merged result.", "type_name": "array", "is_generator": false, "return_name": "merged_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "This array must contain integers in `[0, n-1]`, where `n` is the number\nof choices, unless ``mode=wrap`` or ``mode=clip``, in which cases any\nintegers are permissible.", "arg_name": "a", "type_name": "int array", "is_optional": false, "default": null}}], [["localhost:8000/not_equal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1, x2"], "description": "Input arrays.\nIf ``x1.shape != x2.shape``, they must be broadcastable to a common\nshape (which becomes the shape of the output).", "arg_name": "x1, x2", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, element-wise comparison of `x1` and `x2`.\nTypically of type bool, unless ``dtype=object`` is passed.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array, element-wise comparison of `x1` and `x2`.\nTypically of type bool, unless ``dtype=object`` is passed.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray or scalar", "is_generator": false, "return_name": "out"}}], ["localhost:8000/arctan2", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x1"], "description": "`y`-coordinates.", "arg_name": "x1", "type_name": "array_like, real-valued", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x2"], "description": "`x`-coordinates.\nIf ``x1.shape != x2.shape``, they must be broadcastable to a common\nshape (which becomes the shape of the output).", "arg_name": "x2", "type_name": "array_like, real-valued", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of angles in radians, in the range ``[-pi, pi]``.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray", "is_generator": false, "return_name": "angle"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of angles in radians, in the range ``[-pi, pi]``.\nThis is a scalar if both `x1` and `x2` are scalars.", "type_name": "ndarray", "is_generator": false, "return_name": "angle"}}]]]
[["localhost:8000/choose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "This array must contain integers in `[0, n-1]`, where `n` is the number\nof choices, unless ``mode=wrap`` or ``mode=clip``, in which cases any\nintegers are permissible.", "arg_name": "a", "type_name": "int array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "choices"], "description": "Choice arrays. `a` and all of the choices must be broadcastable to the\nsame shape.  If `choices` is itself an array (not recommended), then\nits outermost dimension (i.e., the one corresponding to\n``choices.shape[0]``) is taken as defining the \"sequence\".", "arg_name": "choices", "type_name": "sequence of arrays", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype. Note that `out` is always\nbuffered if `mode='raise'`; use other modes for better performance.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Specifies how indices outside `[0, n-1]` will be treated:\n\n  * 'raise' : an exception is raised\n  * 'wrap' : value becomes value mod `n`\n  * 'clip' : values < 0 are mapped to 0, values > n-1 are mapped to n-1", "arg_name": "mode", "type_name": "{'raise' (default), 'wrap', 'clip'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The merged result.", "type_name": "array", "is_generator": false, "return_name": "merged_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "choices"], "description": "Choice arrays. `a` and all of the choices must be broadcastable to the\nsame shape.  If `choices` is itself an array (not recommended), then\nits outermost dimension (i.e., the one corresponding to\n``choices.shape[0]``) is taken as defining the \"sequence\".", "arg_name": "choices", "type_name": "sequence of arrays", "is_optional": false, "default": null}}], [["localhost:8000/nansum", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose sum is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the sum is computed. The default is to compute the\nsum of the flattened array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The type of the returned array and of the accumulator in which the\nelements are summed.  By default, the dtype of `a` is used.  An\nexception is when `a` has an integer type with less precision than\nthe platform (u)intp. In that case, the default will be either\n(u)int32 or (u)int64 depending on whether the platform is 32 or 64\nbits. For inexact inputs, dtype must be inexact.\n\n.. versionadded:: 1.8.0", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "will"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``. If provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary.  See\n:ref:`ufuncs-output-type` for more details. The casting of NaN to integer\ncan yield unexpected results.\n\n.. versionadded:: 1.8.0", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the original `a`.\n\n\nIf the value is anything but the default, then\n`keepdims` will be passed through to the `mean` or `sum` methods\nof sub-classes of `ndarray`.  If the sub-classes methods\ndoes not implement `keepdims` any exceptions will be raised.\n\n.. versionadded:: 1.8.0", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which it is returned. The result has the same\nsize as `a`, and the same shape as `a` if `axis` is not None\nor `a` is a 1-d array.", "type_name": "ndarray.", "is_generator": false, "return_name": "nansum"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which it is returned. The result has the same\nsize as `a`, and the same shape as `a` if `axis` is not None\nor `a` is a 1-d array.", "type_name": "ndarray.", "is_generator": false, "return_name": "nansum"}}], ["localhost:8000/find_common_type", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array_types"], "description": "A list of dtypes or dtype convertible objects representing arrays.", "arg_name": "array_types", "type_name": "sequence", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "scalar_types"], "description": "A list of dtypes or dtype convertible objects representing scalars.", "arg_name": "scalar_types", "type_name": "sequence", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The common data type, which is the maximum of `array_types` ignoring\n`scalar_types`, unless the maximum of `scalar_types` is of a\ndifferent kind (`dtype.kind`). If the kind is not understood, then\nNone is returned.", "type_name": "dtype", "is_generator": false, "return_name": "datatype"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The common data type, which is the maximum of `array_types` ignoring\n`scalar_types`, unless the maximum of `scalar_types` is of a\ndifferent kind (`dtype.kind`). If the kind is not understood, then\nNone is returned.", "type_name": "dtype", "is_generator": false, "return_name": "datatype"}}]]]
[["localhost:8000/choose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "This array must contain integers in `[0, n-1]`, where `n` is the number\nof choices, unless ``mode=wrap`` or ``mode=clip``, in which cases any\nintegers are permissible.", "arg_name": "a", "type_name": "int array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "choices"], "description": "Choice arrays. `a` and all of the choices must be broadcastable to the\nsame shape.  If `choices` is itself an array (not recommended), then\nits outermost dimension (i.e., the one corresponding to\n``choices.shape[0]``) is taken as defining the \"sequence\".", "arg_name": "choices", "type_name": "sequence of arrays", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype. Note that `out` is always\nbuffered if `mode='raise'`; use other modes for better performance.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Specifies how indices outside `[0, n-1]` will be treated:\n\n  * 'raise' : an exception is raised\n  * 'wrap' : value becomes value mod `n`\n  * 'clip' : values < 0 are mapped to 0, values > n-1 are mapped to n-1", "arg_name": "mode", "type_name": "{'raise' (default), 'wrap', 'clip'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The merged result.", "type_name": "array", "is_generator": false, "return_name": "merged_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype. Note that `out` is always\nbuffered if `mode='raise'`; use other modes for better performance.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/ufunc", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "*x"], "description": "Input arrays.", "arg_name": "*x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate array object(s) in which to put the result; if provided, it\nmust have a shape that the inputs broadcast to. A tuple of arrays\n(possible only as a keyword argument) must have length equal to the\nnumber of outputs; use None for uninitialized outputs to be\nallocated by the ufunc.", "arg_name": "out", "type_name": "ndarray, None, or tuple of ndarray and None", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "This condition is broadcast over the input. At locations where the\ncondition is True, the `out` array will be set to the ufunc result.\nElsewhere, the `out` array will retain its original value.\nNote that if an uninitialized `out` array is created via the default\n``out=None``, locations within it where the condition is False will\nremain uninitialized.", "arg_name": "where", "type_name": "array_like", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "`r` will have the shape that the arrays in `x` broadcast to; if `out` is\nprovided, it will be returned. If not, `r` will be allocated and\nmay contain uninitialized values. If the function has more than one\noutput, then the result will be a tuple of arrays.", "type_name": "ndarray or tuple of ndarray", "is_generator": false, "return_name": "r"}}]]]
[["localhost:8000/choose", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "This array must contain integers in `[0, n-1]`, where `n` is the number\nof choices, unless ``mode=wrap`` or ``mode=clip``, in which cases any\nintegers are permissible.", "arg_name": "a", "type_name": "int array", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "choices"], "description": "Choice arrays. `a` and all of the choices must be broadcastable to the\nsame shape.  If `choices` is itself an array (not recommended), then\nits outermost dimension (i.e., the one corresponding to\n``choices.shape[0]``) is taken as defining the \"sequence\".", "arg_name": "choices", "type_name": "sequence of arrays", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "If provided, the result will be inserted into this array. It should\nbe of the appropriate shape and dtype. Note that `out` is always\nbuffered if `mode='raise'`; use other modes for better performance.", "arg_name": "out", "type_name": "array", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Specifies how indices outside `[0, n-1]` will be treated:\n\n  * 'raise' : an exception is raised\n  * 'wrap' : value becomes value mod `n`\n  * 'clip' : values < 0 are mapped to 0, values > n-1 are mapped to n-1", "arg_name": "mode", "type_name": "{'raise' (default), 'wrap', 'clip'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The merged result.", "type_name": "array", "is_generator": false, "return_name": "merged_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "mode"], "description": "Specifies how indices outside `[0, n-1]` will be treated:\n\n  * 'raise' : an exception is raised\n  * 'wrap' : value becomes value mod `n`\n  * 'clip' : values < 0 are mapped to 0, values > n-1 are mapped to n-1", "arg_name": "mode", "type_name": "{'raise' (default), 'wrap', 'clip'}", "is_optional": true, "default": null}}], [["localhost:8000/tri", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the array.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the array.\nBy default, `M` is taken equal to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "The sub-diagonal at and below which the array is filled.\n`k` = 0 is the main diagonal, while `k` < 0 is below it,\nand `k` > 0 is above.  The default is 0.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": "0."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data type of the returned array.  The default is float.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "float."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with its lower triangle filled with ones and zero elsewhere;\nin other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.", "type_name": "ndarray of shape (N, M)", "is_generator": false, "return_name": "tri"}}], ["localhost:8000/polyval", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "1D array of polynomial coefficients (including coefficients equal\nto zero) from highest degree to the constant term, or an\ninstance of poly1d.", "arg_name": "p", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "A number, an array of numbers, or an instance of poly1d, at\nwhich to evaluate `p`.", "arg_name": "x", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `x` is a poly1d instance, the result is the composition of the two\npolynomials, i.e., `x` is \"substituted\" in `p` and the simplified\nresult is returned. In addition, the type of `x` - array_like or\npoly1d - governs the type of the output: `x` array_like => `values`\narray_like, `x` a poly1d object => `values` is also.", "type_name": "ndarray or poly1d", "is_generator": false, "return_name": "values"}}]]]
[["localhost:8000/clip", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing elements to clip.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a_min, a_max"], "description": "Minimum and maximum value. If ``None``, clipping is not performed on\nthe corresponding edge. Only one of `a_min` and `a_max` may be\n``None``. Both are broadcast against `a`.", "arg_name": "a_min, a_max", "type_name": "array_like or None", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "The results will be placed in this array. It may be the input\narray for in-place clipping.  `out` must be of the right shape\nto hold the output.  Its type is preserved.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.17.0", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the elements of `a`, but where values\n< `a_min` are replaced with `a_min`, and those > `a_max`\nwith `a_max`.", "type_name": "ndarray", "is_generator": false, "return_name": "clipped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing elements to clip.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/moveaxis", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "The array whose axes should be reordered.", "arg_name": "a", "type_name": "np.ndarray", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "source"], "description": "Original positions of the axes to move. These must be unique.", "arg_name": "source", "type_name": "int or sequence of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "destination"], "description": "Destination positions for each of the original axes. These must also be\nunique.", "arg_name": "destination", "type_name": "int or sequence of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array with moved axes. This array is a view of the input array.", "type_name": "np.ndarray", "is_generator": false, "return_name": "result"}}], ["localhost:8000/ix_", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "args"], "description": "Each sequence should be of integer or boolean type.\nBoolean sequences will be interpreted as boolean masks for the\ncorresponding dimension (equivalent to passing in\n``np.nonzero(boolean_sequence)``).", "arg_name": "args", "type_name": "1-D sequences", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "N arrays with N dimensions each, with N the number of input\nsequences. Together these arrays form an open mesh.", "type_name": "tuple of ndarrays", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "N arrays with N dimensions each, with N the number of input\nsequences. Together these arrays form an open mesh.", "type_name": "tuple of ndarrays", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/clip", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing elements to clip.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a_min, a_max"], "description": "Minimum and maximum value. If ``None``, clipping is not performed on\nthe corresponding edge. Only one of `a_min` and `a_max` may be\n``None``. Both are broadcast against `a`.", "arg_name": "a_min, a_max", "type_name": "array_like or None", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "The results will be placed in this array. It may be the input\narray for in-place clipping.  `out` must be of the right shape\nto hold the output.  Its type is preserved.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.17.0", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the elements of `a`, but where values\n< `a_min` are replaced with `a_min`, and those > `a_max`\nwith `a_max`.", "type_name": "ndarray", "is_generator": false, "return_name": "clipped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a_min, a_max"], "description": "Minimum and maximum value. If ``None``, clipping is not performed on\nthe corresponding edge. Only one of `a_min` and `a_max` may be\n``None``. Both are broadcast against `a`.", "arg_name": "a_min, a_max", "type_name": "array_like or None", "is_optional": false, "default": null}}], [["localhost:8000/delete", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Input array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "obj"], "description": "Indicate indices of sub-arrays to remove along the specified axis.\n\n.. versionchanged:: 1.19.0\n    Boolean indices are now treated as a mask of elements to remove,\n    rather than being cast to the integers 0 and 1.", "arg_name": "obj", "type_name": "slice, int or array of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which to delete the subarray defined by `obj`.\nIf `axis` is None, `obj` is applied to the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with the elements specified by `obj` removed. Note\nthat `delete` does not occur in-place. If `axis` is None, `out` is\na flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/append", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "arr"], "description": "Values are appended to a copy of this array.", "arg_name": "arr", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "values"], "description": "These values are appended to a copy of `arr`.  It must be of the\ncorrect shape (the same shape as `arr`, excluding `axis`).  If\n`axis` is not specified, `values` can be any shape and will be\nflattened before use.", "arg_name": "values", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The axis along which `values` are appended.  If `axis` is not\ngiven, both `arr` and `values` are flattened before use.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `arr` with `values` appended to `axis`.  Note that\n`append` does not occur in-place: a new array is allocated and\nfilled.  If `axis` is None, `out` is a flattened array.", "type_name": "ndarray", "is_generator": false, "return_name": "append"}}]]]
[["localhost:8000/clip", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing elements to clip.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a_min, a_max"], "description": "Minimum and maximum value. If ``None``, clipping is not performed on\nthe corresponding edge. Only one of `a_min` and `a_max` may be\n``None``. Both are broadcast against `a`.", "arg_name": "a_min, a_max", "type_name": "array_like or None", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "The results will be placed in this array. It may be the input\narray for in-place clipping.  `out` must be of the right shape\nto hold the output.  Its type is preserved.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.17.0", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the elements of `a`, but where values\n< `a_min` are replaced with `a_min`, and those > `a_max`\nwith `a_max`.", "type_name": "ndarray", "is_generator": false, "return_name": "clipped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "The results will be placed in this array. It may be the input\narray for in-place clipping.  `out` must be of the right shape\nto hold the output.  Its type is preserved.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}]]]
[["localhost:8000/clip", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing elements to clip.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a_min, a_max"], "description": "Minimum and maximum value. If ``None``, clipping is not performed on\nthe corresponding edge. Only one of `a_min` and `a_max` may be\n``None``. Both are broadcast against `a`.", "arg_name": "a_min, a_max", "type_name": "array_like or None", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "The results will be placed in this array. It may be the input\narray for in-place clipping.  `out` must be of the right shape\nto hold the output.  Its type is preserved.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.17.0", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array with the elements of `a`, but where values\n< `a_min` are replaced with `a_min`, and those > `a_max`\nwith `a_max`.", "type_name": "ndarray", "is_generator": false, "return_name": "clipped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "**kwargs"], "description": "For other keyword-only arguments, see the\n:ref:`ufunc docs <ufuncs.kwargs>`.\n\n.. versionadded:: 1.17.0", "arg_name": "**kwargs", "type_name": null, "is_optional": null, "default": null}}], [["localhost:8000/datetime_data", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "The dtype object, which must be a `datetime64` or `timedelta64` type.", "arg_name": "dtype", "type_name": "dtype", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The :ref:`datetime unit <arrays.dtypes.dateunits>` on which this dtype\nis based.", "type_name": "str", "is_generator": false, "return_name": "unit"}}], ["localhost:8000/get_printoptions", {"method": "post", "params": [], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dictionary of current print options with keys\n\n  - precision : int\n  - threshold : int\n  - edgeitems : int\n  - linewidth : int\n  - suppress : bool\n  - nanstr : str\n  - infstr : str\n  - formatter : dict of callables\n  - sign : str\n\nFor a full description of these options, see `set_printoptions`.", "type_name": "dict", "is_generator": false, "return_name": "print_opts"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Dictionary of current print options with keys\n\n  - precision : int\n  - threshold : int\n  - edgeitems : int\n  - linewidth : int\n  - suppress : bool\n  - nanstr : str\n  - infstr : str\n  - formatter : dict of callables\n  - sign : str\n\nFor a full description of these options, see `set_printoptions`.", "type_name": "dict", "is_generator": false, "return_name": "print_opts"}}]]]
[["localhost:8000/compress", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Array that selects which entries to return. If len(condition)\nis less than the size of `a` along the given axis, then output is\ntruncated to the length of the condition array.", "arg_name": "condition", "type_name": "1-D array of bools", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which to extract a part.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to take slices. If None (default), work on the\nflattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output array.  Its type is preserved and it must be of the right\nshape to hold the output.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `a` without the slices along axis for which `condition`\nis false.", "type_name": "ndarray", "is_generator": false, "return_name": "compressed_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Array that selects which entries to return. If len(condition)\nis less than the size of `a` along the given axis, then output is\ntruncated to the length of the condition array.", "arg_name": "condition", "type_name": "1-D array of bools", "is_optional": false, "default": null}}], [["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/compress", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Array that selects which entries to return. If len(condition)\nis less than the size of `a` along the given axis, then output is\ntruncated to the length of the condition array.", "arg_name": "condition", "type_name": "1-D array of bools", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which to extract a part.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to take slices. If None (default), work on the\nflattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output array.  Its type is preserved and it must be of the right\nshape to hold the output.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `a` without the slices along axis for which `condition`\nis false.", "type_name": "ndarray", "is_generator": false, "return_name": "compressed_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which to extract a part.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}], ["localhost:8000/broadcast_to", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "array"], "description": "The array to broadcast.", "arg_name": "array", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "The shape of the desired array.", "arg_name": "shape", "type_name": "tuple", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A readonly view on the original array with the given shape. It is\ntypically not contiguous. Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location.", "type_name": "array", "is_generator": false, "return_name": "broadcast"}}]]]
[["localhost:8000/compress", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Array that selects which entries to return. If len(condition)\nis less than the size of `a` along the given axis, then output is\ntruncated to the length of the condition array.", "arg_name": "condition", "type_name": "1-D array of bools", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which to extract a part.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to take slices. If None (default), work on the\nflattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output array.  Its type is preserved and it must be of the right\nshape to hold the output.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `a` without the slices along axis for which `condition`\nis false.", "type_name": "ndarray", "is_generator": false, "return_name": "compressed_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to take slices. If None (default), work on the\nflattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/reshape", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be reshaped.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "newshape"], "description": "The new shape should be compatible with the original shape. If\nan integer, then the result will be a 1-D array of that length.\nOne shape dimension can be -1. In this case, the value is\ninferred from the length of the array and remaining dimensions.", "arg_name": "newshape", "type_name": "int or tuple of ints", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Read the elements of `a` using this index order, and place the\nelements into the reshaped array using this index order.  'C'\nmeans to read / write the elements using C-like index order,\nwith the last axis index changing fastest, back to the first\naxis index changing slowest. 'F' means to read / write the\nelements using Fortran-like index order, with the first index\nchanging fastest, and the last index changing slowest. Note that\nthe 'C' and 'F' options take no account of the memory layout of\nthe underlying array, and only refer to the order of indexing.\n'A' means to read / write the elements in Fortran-like index\norder if `a` is Fortran *contiguous* in memory, C-like order\notherwise.", "arg_name": "order", "type_name": "{'C', 'F', 'A'}", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "This will be a new view object if possible; otherwise, it will\nbe a copy.  Note there is no guarantee of the *memory layout* (C- or\nFortran- contiguous) of the returned array.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}], ["localhost:8000/empty", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "shape"], "description": "Shape of the empty array, e.g., ``(2, 3)`` or ``2``.", "arg_name": "shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Desired output data-type for the array, e.g, `numpy.int8`. Default is\n`numpy.float64`.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.", "arg_name": "order", "type_name": "{'C', 'F'}, optional, default: 'C'", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/compress", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "condition"], "description": "Array that selects which entries to return. If len(condition)\nis less than the size of `a` along the given axis, then output is\ntruncated to the length of the condition array.", "arg_name": "condition", "type_name": "1-D array of bools", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which to extract a part.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which to take slices. If None (default), work on the\nflattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output array.  Its type is preserved and it must be of the right\nshape to hold the output.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A copy of `a` without the slices along axis for which `condition`\nis false.", "type_name": "ndarray", "is_generator": false, "return_name": "compressed_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Output array.  Its type is preserved and it must be of the right\nshape to hold the output.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}], ["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}]]]
[["localhost:8000/cumprod", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative product is computed.  By default\nthe input is flattened.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array, as well as of the accumulator in which\nthe elements are multiplied.  If *dtype* is not specified, it\ndefaults to the dtype of `a`, unless `a` has an integer dtype with\na precision less than that of the default platform integer.  In\nthat case, the default platform integer is used instead.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type of the resulting values will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to out is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "cumprod"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/cumprod", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative product is computed.  By default\nthe input is flattened.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array, as well as of the accumulator in which\nthe elements are multiplied.  If *dtype* is not specified, it\ndefaults to the dtype of `a`, unless `a` has an integer dtype with\na precision less than that of the default platform integer.  In\nthat case, the default platform integer is used instead.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type of the resulting values will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to out is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "cumprod"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative product is computed.  By default\nthe input is flattened.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], [["localhost:8000/polymul", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The polynomial resulting from the multiplication of the inputs. If\neither inputs is a poly1d object, then the output is also a poly1d\nobject. Otherwise, it is a 1D array of polynomial coefficients from\nhighest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The polynomial resulting from the multiplication of the inputs. If\neither inputs is a poly1d object, then the output is also a poly1d\nobject. Otherwise, it is a 1D array of polynomial coefficients from\nhighest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}], ["localhost:8000/polyadd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/cumprod", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative product is computed.  By default\nthe input is flattened.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array, as well as of the accumulator in which\nthe elements are multiplied.  If *dtype* is not specified, it\ndefaults to the dtype of `a`, unless `a` has an integer dtype with\na precision less than that of the default platform integer.  In\nthat case, the default platform integer is used instead.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type of the resulting values will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to out is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "cumprod"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array, as well as of the accumulator in which\nthe elements are multiplied.  If *dtype* is not specified, it\ndefaults to the dtype of `a`, unless `a` has an integer dtype with\na precision less than that of the default platform integer.  In\nthat case, the default platform integer is used instead.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "the"}}], [["localhost:8000/around", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "decimals"], "description": "Number of decimal places to round to (default: 0).  If\ndecimals is negative, it specifies the number of positions to\nthe left of the decimal point.", "arg_name": "decimals", "type_name": "int", "is_optional": true, "default": "0"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must have\nthe same shape as the expected output, but the type of the output\nvalues will be cast if necessary. See :ref:`ufuncs-output-type` for more\ndetails.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array of the same type as `a`, containing the rounded values.\nUnless `out` was specified, a new array is created.  A reference to\nthe result is returned.\n\nThe real and imaginary parts of complex numbers are rounded\nseparately.  The result of rounding a float is a float.", "type_name": "ndarray", "is_generator": false, "return_name": "rounded_array"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/cumprod", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative product is computed.  By default\nthe input is flattened.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array, as well as of the accumulator in which\nthe elements are multiplied.  If *dtype* is not specified, it\ndefaults to the dtype of `a`, unless `a` has an integer dtype with\na precision less than that of the default platform integer.  In\nthat case, the default platform integer is used instead.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "the"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type of the resulting values will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to out is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "cumprod"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type of the resulting values will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/isposinf", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "The input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "A location into which the result is stored. If provided, it must have a\nshape that the input broadcasts to. If not provided or None, a\nfreshly-allocated boolean array is returned.", "arg_name": "out", "type_name": "array_like", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\n\nIf a second argument is supplied the result is stored there. If the\ntype of that array is a numeric type the result is represented as zeros\nand ones, if the type is boolean then as False and True.\nThe return value `out` is then a reference to that array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}]]]
[["localhost:8000/cumsum", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative sum is computed. The default\n(None) is to compute the cumsum over the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array and of the accumulator in which the\nelements are summed.  If `dtype` is not specified, it defaults\nto the dtype of `a`, unless `a` has an integer dtype with a\nprecision less than that of the default platform integer.  In\nthat case, the default platform integer is used.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type will be cast if necessary. See :ref:`ufuncs-output-type` for\nmore details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to `out` is returned. The\nresult has the same size as `a`, and the same shape as `a` if\n`axis` is not None or `a` is a 1-d array.", "type_name": "ndarray.", "is_generator": false, "return_name": "cumsum_along_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/unwrap", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "p"], "description": "Input array.", "arg_name": "p", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "discont"], "description": "Maximum discontinuity between values, default is ``pi``.", "arg_name": "discont", "type_name": "float", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which unwrap will operate, default is the last axis.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": "the"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/iscomplex", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "x"], "description": "Input array.", "arg_name": "x", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Output array.", "type_name": "ndarray of bools", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/cumsum", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative sum is computed. The default\n(None) is to compute the cumsum over the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array and of the accumulator in which the\nelements are summed.  If `dtype` is not specified, it defaults\nto the dtype of `a`, unless `a` has an integer dtype with a\nprecision less than that of the default platform integer.  In\nthat case, the default platform integer is used.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type will be cast if necessary. See :ref:`ufuncs-output-type` for\nmore details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to `out` is returned. The\nresult has the same size as `a`, and the same shape as `a` if\n`axis` is not None or `a` is a 1-d array.", "type_name": "ndarray.", "is_generator": false, "return_name": "cumsum_along_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative sum is computed. The default\n(None) is to compute the cumsum over the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}], [["localhost:8000/bartlett", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/polyadd", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a1, a2"], "description": "Input polynomials.", "arg_name": "a1, a2", "type_name": "array_like or poly1d object", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The sum of the inputs. If either input is a poly1d object, then the\noutput is also a poly1d object. Otherwise, it is a 1D array of\npolynomial coefficients from highest to lowest degree.", "type_name": "ndarray or poly1d object", "is_generator": false, "return_name": "out"}}]]]
[["localhost:8000/cumsum", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative sum is computed. The default\n(None) is to compute the cumsum over the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array and of the accumulator in which the\nelements are summed.  If `dtype` is not specified, it defaults\nto the dtype of `a`, unless `a` has an integer dtype with a\nprecision less than that of the default platform integer.  In\nthat case, the default platform integer is used.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type will be cast if necessary. See :ref:`ufuncs-output-type` for\nmore details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to `out` is returned. The\nresult has the same size as `a`, and the same shape as `a` if\n`axis` is not None or `a` is a 1-d array.", "type_name": "ndarray.", "is_generator": false, "return_name": "cumsum_along_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array and of the accumulator in which the\nelements are summed.  If `dtype` is not specified, it defaults\nto the dtype of `a`, unless `a` has an integer dtype with a\nprecision less than that of the default platform integer.  In\nthat case, the default platform integer is used.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "s"}}], [["localhost:8000/nanpercentile", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array or object that can be converted to an array, containing\nnan values to be ignored.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "q"], "description": "Percentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.", "arg_name": "q", "type_name": "array_like of float", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the percentiles are computed. The\ndefault is to compute the percentile(s) along a flattened\nversion of the array.", "arg_name": "axis", "type_name": "{int, tuple of int, None}", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output,\nbut the type (of the output) will be cast if necessary.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "overwrite_input"], "description": "If True, then allow the input array `a` to be modified by intermediate\ncalculations, to save memory. In this case, the contents of the input\n`a` after this function completes is undefined.", "arg_name": "overwrite_input", "type_name": "bool", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "interpolation"], "description": "This optional parameter specifies the interpolation method to\nuse when the desired percentile lies between two data points\n``i < j``:\n\n* 'linear': ``i + (j - i) * fraction``, where ``fraction``\n  is the fractional part of the index surrounded by ``i``\n  and ``j``.\n* 'lower': ``i``.\n* 'higher': ``j``.\n* 'nearest': ``i`` or ``j``, whichever is nearest.\n* 'midpoint': ``(i + j) / 2``.", "arg_name": "interpolation", "type_name": "{'linear', 'lower', 'higher', 'midpoint', 'nearest'}", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left in\nthe result as dimensions with size one. With this option, the\nresult will broadcast correctly against the original array `a`.\n\nIf this is anything but the default value it will be passed\nthrough (in the special case of an empty array) to the\n`mean` function of the underlying array.  If the array is\na sub-class and `mean` does not have the kwarg `keepdims` this\nwill raise a RuntimeError.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `q` is a single percentile and `axis=None`, then the result\nis a scalar. If multiple percentiles are given, first axis of\nthe result corresponds to the percentiles. The other axes are\nthe axes that remain after the reduction of `a`. If the input\ncontains integers or floats smaller than ``float64``, the output\ndata-type is ``float64``. Otherwise, the output data-type is the\nsame as that of the input. If `out` is specified, that array is\nreturned instead.", "type_name": "scalar or ndarray", "is_generator": false, "return_name": "percentile"}}], ["localhost:8000/squeeze", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": ".. versionadded:: 1.7.0\n\nSelects a subset of the entries of length one in the\nshape. If an axis is selected with shape entry greater than\none, an error is raised.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The input array, but with all or a subset of the\ndimensions of length 1 removed. This is always `a` itself\nor a view into `a`. Note that if all axes are squeezed,\nthe result is a 0d array and not a scalar.", "type_name": "ndarray", "is_generator": false, "return_name": "squeezed"}}]]]
[["localhost:8000/cumsum", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis along which the cumulative sum is computed. The default\n(None) is to compute the cumsum over the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type of the returned array and of the accumulator in which the\nelements are summed.  If `dtype` is not specified, it defaults\nto the dtype of `a`, unless `a` has an integer dtype with a\nprecision less than that of the default platform integer.  In\nthat case, the default platform integer is used.", "arg_name": "dtype", "type_name": "dtype", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type will be cast if necessary. See :ref:`ufuncs-output-type` for\nmore details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A new array holding the result is returned unless `out` is\nspecified, in which case a reference to `out` is returned. The\nresult has the same size as `a`, and the same shape as `a` if\n`axis` is not None or `a` is a 1-d array.", "type_name": "ndarray.", "is_generator": false, "return_name": "cumsum_along_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternative output array in which to place the result. It must\nhave the same shape and buffer length as the expected output\nbut the type will be cast if necessary. See :ref:`ufuncs-output-type` for\nmore details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": null}}], [["localhost:8000/apply_over_axes", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "func"], "description": "This function must take two arguments, `func(a, axis)`.", "arg_name": "func", "type_name": "function", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input array.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axes"], "description": "Axes over which `func` is applied; the elements must be integers.", "arg_name": "axes", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The output array.  The number of dimensions is the same as `a`,\nbut the shape can be different.  This depends on whether `func`\nchanges the shape of its output with respect to its input.", "type_name": "ndarray", "is_generator": false, "return_name": "apply_over_axis"}}], ["localhost:8000/broadcast_arrays", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "`*args`"], "description": "The arrays to broadcast.", "arg_name": "`*args`", "type_name": "array_likes", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "subok"], "description": "If True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).", "arg_name": "subok", "type_name": "bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "These arrays are views on the original arrays.  They are typically\nnot contiguous.  Furthermore, more than one element of a\nbroadcasted array may refer to a single memory location. If you need\nto write to the arrays, make copies first. While you can set the\n``writable`` flag True, writing to a single output value may end up\nchanging more than one location in the output array.\n\n.. deprecated:: 1.17\n    The output is currently marked so that if written to, a deprecation\n    warning will be emitted. A future version will set the\n    ``writable`` flag False so writing to it will raise an error.", "type_name": "list of arrays", "is_generator": false, "return_name": "broadcasted"}}]]]
[["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/eye", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "N"], "description": "Number of rows in the output.", "arg_name": "N", "type_name": "int", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of columns in the output. If None, defaults to `N`.", "arg_name": "M", "type_name": "int", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "k"], "description": "Index of the diagonal: 0 (the default) refers to the main diagonal,\na positive value refers to an upper diagonal, and a negative value\nto a lower diagonal.", "arg_name": "k", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Data-type of the returned array.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Whether the output should be stored in row-major (C-style) or\ncolumn-major (Fortran-style) order in memory.\n\n.. versionadded:: 1.14.0", "arg_name": "order", "type_name": "{'C', 'F'}", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array where all elements are equal to zero, except for the `k`-th\ndiagonal, whose values are equal to one.", "type_name": "ndarray of shape (N,M)", "is_generator": false, "return_name": "I"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "An array where all elements are equal to zero, except for the `k`-th\ndiagonal, whose values are equal to one.", "type_name": "ndarray of shape (N,M)", "is_generator": false, "return_name": "I"}}], ["localhost:8000/resize", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array to be resized.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "new_shape"], "description": "Shape of resized array.", "arg_name": "new_shape", "type_name": "int or tuple of int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The new array is formed from the data in the old array, repeated\nif necessary to fill out the required number of elements.  The\ndata are repeated in the order that they are stored in memory.", "type_name": "ndarray", "is_generator": false, "return_name": "reshaped_array"}}]]]
[["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}], [["localhost:8000/bartlett", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "M"], "description": "Number of points in the output window. If zero or less, an\nempty array is returned.", "arg_name": "M", "type_name": "int", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "The triangular window, with the maximum value normalized to one\n(the value one appears only if the number of samples is odd), with\nthe first and last samples equal to zero.", "type_name": "array", "is_generator": false, "return_name": "out"}}], ["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}]]]
[["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}], [["localhost:8000/gradient", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "f"], "description": "An N-dimensional array containing samples of a scalar function.", "arg_name": "f", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "varargs"], "description": "Spacing between f values. Default unitary spacing for all dimensions.\nSpacing can be specified using:\n\n1. single scalar to specify a sample distance for all dimensions.\n2. N scalars to specify a constant sample distance for each dimension.\n   i.e. `dx`, `dy`, `dz`, ...\n3. N arrays to specify the coordinates of the values along each\n   dimension of F. The length of the array must match the size of\n   the corresponding dimension\n4. Any combination of N scalars/arrays with the meaning of 2. and 3.\n\nIf `axis` is given, the number of varargs must equal the number of axes.\nDefault: 1.", "arg_name": "varargs", "type_name": "list of scalar or array", "is_optional": true, "default": "unitary"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "edge_order"], "description": "Gradient is calculated using N-th order accurate differences\nat the boundaries. Default: 1.\n\n.. versionadded:: 1.9.1", "arg_name": "edge_order", "type_name": "{1, 2}", "is_optional": true, "default": "1."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Gradient is calculated only along the given axis or axes\nThe default (axis = None) is to calculate the gradient for all the axes\nof the input array. axis may be negative, in which case it counts from\nthe last to the first axis.\n\n.. versionadded:: 1.11.0", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.", "type_name": "ndarray or list of ndarray", "is_generator": false, "return_name": "gradient"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.", "type_name": "ndarray or list of ndarray", "is_generator": false, "return_name": "gradient"}}], ["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}]]]
[["localhost:8000/diagonal", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array from which the diagonals are taken.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "offset"], "description": "Offset of the diagonal from the main diagonal.  Can be positive or\nnegative.  Defaults to main diagonal (0).", "arg_name": "offset", "type_name": "int", "is_optional": true, "default": "main"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis1"], "description": "Axis to be used as the first axis of the 2-D sub-arrays from which\nthe diagonals should be taken.  Defaults to first axis (0).", "arg_name": "axis1", "type_name": "int", "is_optional": true, "default": "first"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `a` is 2-D, then a 1-D array containing the diagonal and of the\nsame type as `a` is returned unless `a` is a `matrix`, in which case\na 1-D array rather than a (2-D) `matrix` is returned in order to\nmaintain backward compatibility.\n\nIf ``a.ndim > 2``, then the dimensions specified by `axis1` and `axis2`\nare removed, and a new axis inserted at the end corresponding to the\ndiagonal.", "type_name": "ndarray", "is_generator": false, "return_name": "array_of_diagonals"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis2"], "description": "Axis to be used as the second axis of the 2-D sub-arrays from\nwhich the diagonals should be taken. Defaults to second axis (1).", "arg_name": "axis2", "type_name": "int", "is_optional": true, "default": "second"}}], [["localhost:8000/gradient", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "f"], "description": "An N-dimensional array containing samples of a scalar function.", "arg_name": "f", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "varargs"], "description": "Spacing between f values. Default unitary spacing for all dimensions.\nSpacing can be specified using:\n\n1. single scalar to specify a sample distance for all dimensions.\n2. N scalars to specify a constant sample distance for each dimension.\n   i.e. `dx`, `dy`, `dz`, ...\n3. N arrays to specify the coordinates of the values along each\n   dimension of F. The length of the array must match the size of\n   the corresponding dimension\n4. Any combination of N scalars/arrays with the meaning of 2. and 3.\n\nIf `axis` is given, the number of varargs must equal the number of axes.\nDefault: 1.", "arg_name": "varargs", "type_name": "list of scalar or array", "is_optional": true, "default": "unitary"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "edge_order"], "description": "Gradient is calculated using N-th order accurate differences\nat the boundaries. Default: 1.\n\n.. versionadded:: 1.9.1", "arg_name": "edge_order", "type_name": "{1, 2}", "is_optional": true, "default": "1."}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Gradient is calculated only along the given axis or axes\nThe default (axis = None) is to calculate the gradient for all the axes\nof the input array. axis may be negative, in which case it counts from\nthe last to the first axis.\n\n.. versionadded:: 1.11.0", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.", "type_name": "ndarray or list of ndarray", "is_generator": false, "return_name": "gradient"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.", "type_name": "ndarray or list of ndarray", "is_generator": false, "return_name": "gradient"}}], ["localhost:8000/packbits", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "An array of integers or booleans whose elements should be packed to\nbits.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "The dimension over which bit-packing is done.\n``None`` implies packing the flattened array.", "arg_name": "axis", "type_name": "int", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "bitorder"], "description": "The order of the input bits. 'big' will mimic bin(val),\n``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\nreverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\nDefaults to 'big'.\n\n.. versionadded:: 1.17.0", "arg_name": "bitorder", "type_name": "{'big', 'little'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array of type uint8 whose elements represent bits corresponding to the\nlogical (0 or nonzero) value of the input elements. The shape of\n`packed` has the same number of dimensions as the input (unless `axis`\nis None, in which case the output is 1-D).", "type_name": "ndarray", "is_generator": false, "return_name": "packed"}}]]]
[["localhost:8000/mean", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose mean is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "axis"], "description": "Axis or axes along which the means are computed. The default is to\ncompute the mean of the flattened array.\n\n.. versionadded:: 1.7.0\n\nIf this is a tuple of ints, a mean is performed over multiple axes,\ninstead of a single axis or all the axes as before.", "arg_name": "axis", "type_name": "None or int or tuple of ints", "is_optional": true, "default": "to"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "Type to use in computing the mean.  For integer inputs, the default\nis `float64`; for floating point inputs, it is the same as the\ninput dtype.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "out"], "description": "Alternate output array in which to place the result.  The default\nis ``None``; if provided, it must have the same shape as the\nexpected output, but the type will be cast if necessary.\nSee :ref:`ufuncs-output-type` for more details.", "arg_name": "out", "type_name": "ndarray", "is_optional": true, "default": "is"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "keepdims"], "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\n\nIf the default value is passed, then `keepdims` will not be\npassed through to the `mean` method of sub-classes of\n`ndarray`, however any non-default value will be.  If the\nsub-class' method does not implement `keepdims` any\nexceptions will be raised.", "arg_name": "keepdims", "type_name": "bool", "is_optional": true, "default": "value"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "where"], "description": "Elements to include in the mean. See `~numpy.ufunc.reduce` for details.\n\n.. versionadded:: 1.20.0", "arg_name": "where", "type_name": "array_like of bool", "is_optional": true, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "If `out=None`, returns a new array containing the mean values,\notherwise a reference to the output array is returned.", "type_name": "ndarray, see dtype parameter above", "is_generator": false, "return_name": "m"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Array containing numbers whose mean is desired. If `a` is not an\narray, a conversion is attempted.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}], [["localhost:8000/asarray_chkfinite", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data, in any form that can be converted to an array.  This\nincludes lists, lists of tuples, tuples, tuples of tuples, tuples\nof lists and ndarrays.  Success requires no NaNs or Infs.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Memory layout.  'A' and 'K' depend on the order of input array a.\n'C' row-major (C-style),\n'F' column-major (Fortran-style) memory representation.\n'A' (any) means 'F' if `a` is Fortran contiguous, 'C' otherwise\n'K' (keep) preserve input order\nDefaults to 'C'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "s"}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray.  If `a` is a subclass of ndarray, a base\nclass ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray.  If `a` is a subclass of ndarray, a base\nclass ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}], ["localhost:8000/asarray", {"method": "post", "params": [{"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "a"], "description": "Input data, in any form that can be converted to an array.  This\nincludes lists, lists of tuples, tuples, tuples of tuples, tuples\nof lists and ndarrays.", "arg_name": "a", "type_name": "array_like", "is_optional": false, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "dtype"], "description": "By default, the data-type is inferred from the input data.", "arg_name": "dtype", "type_name": "data-type", "is_optional": true, "default": null}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "order"], "description": "Memory layout.  'A' and 'K' depend on the order of input array a.\n'C' row-major (C-style), \n'F' column-major (Fortran-style) memory representation.\n'A' (any) means 'F' if `a` is Fortran contiguous, 'C' otherwise\n'K' (keep) preserve input order\nDefaults to 'C'.", "arg_name": "order", "type_name": "{'C', 'F', 'A', 'K'}", "is_optional": true, "default": "s"}}, {"__instance_type__": ["docstring_parser.common", "DocstringParam"], "attributes": {"args": ["param", "like"], "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. note::\n    The ``like`` keyword is an experimental feature pending on\n    acceptance of :ref:`NEP 35 <NEP35>`.\n\n.. versionadded:: 1.20.0", "arg_name": "like", "type_name": "array_like", "is_optional": false, "default": null}}], "returns": {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray with matching dtype and order.  If `a` is a\nsubclass of ndarray, a base class ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}}, {"__instance_type__": ["docstring_parser.common", "DocstringReturns"], "attributes": {"args": ["returns"], "description": "Array interpretation of `a`.  No copy is performed if the input\nis already an ndarray with matching dtype and order.  If `a` is a\nsubclass of ndarray, a base class ndarray is returned.", "type_name": "ndarray", "is_generator": false, "return_name": "out"}}]]]
